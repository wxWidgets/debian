%{

// THIS FILE HAS BEEN AUTO-GENERATED BY CREATE_VCW

#ifndef SWIG_IsOK
    #define SWIG_IsOK(r)               (r >= 0)
#endif

#ifndef Py_RETURN_NONE
    #define Py_RETURN_NONE return Py_INCREF(Py_None), Py_None
#endif

void _deleteOwningObject(void* obj)
{
    // Crashes sometimes (on app exit, it seems), so we need to disable it
    /*if ( Py_IsInitialized() )
    {
        wxPyBlock_t blocked = wxPyBeginBlockThreads();
        Py_XDECREF((PyObject*)obj);
        wxPyEndBlockThreads(blocked);
    }*/
}
    

static bool gs_funcNamesInitialized = false;
static PyObject* gs___class___Name = NULL;
static PyObject* gs___dict___Name = NULL;
static PyObject* gs__super_call_Name = NULL;
static PyObject* gs_CanContainCustomImage_Name = NULL;
static PyObject* gs_ChildChanged_Name = NULL;
static PyObject* gs_ColourToString_Name = NULL;
static PyObject* gs_ConvertArrayToString_Name = NULL;
static PyObject* gs_CreateControls_Name = NULL;
static PyObject* gs_CreateEditorDialog_Name = NULL;
static PyObject* gs_DeleteItem_Name = NULL;
static PyObject* gs_DoGetAttribute_Name = NULL;
static PyObject* gs_DoGetValidator_Name = NULL;
static PyObject* gs_DoGetValue_Name = NULL;
static PyObject* gs_DoSetAttribute_Name = NULL;
static PyObject* gs_DoShowDialog_Name = NULL;
static PyObject* gs_DoTranslateVal_Name = NULL;
static PyObject* gs_DrawValue_Name = NULL;
static PyObject* gs_GenerateValueAsString_Name = NULL;
static PyObject* gs_GetCellRenderer_Name = NULL;
static PyObject* gs_GetChoiceSelection_Name = NULL;
static PyObject* gs_GetColour_Name = NULL;
static PyObject* gs_GetCustomColourIndex_Name = NULL;
static PyObject* gs_GetEditor_Name = NULL;
static PyObject* gs_GetEditorDialog_Name = NULL;
static PyObject* gs_GetIndexForValue_Name = NULL;
static PyObject* gs_GetName_Name = NULL;
static PyObject* gs_GetValueAsString_Name = NULL;
static PyObject* gs_GetValueFromControl_Name = NULL;
static PyObject* gs_InsertItem_Name = NULL;
static PyObject* gs_IntToValue_Name = NULL;
static PyObject* gs_OnButtonClick_Name = NULL;
static PyObject* gs_OnCustomPaint_Name = NULL;
static PyObject* gs_OnCustomStringEdit_Name = NULL;
static PyObject* gs_OnEvent_Name = NULL;
static PyObject* gs_OnFocus_Name = NULL;
static PyObject* gs_OnMeasureImage_Name = NULL;
static PyObject* gs_OnSetValue_Name = NULL;
static PyObject* gs_OnValidationFailure_Name = NULL;
static PyObject* gs_RefreshChildren_Name = NULL;
static PyObject* gs_SetControlAppearance_Name = NULL;
static PyObject* gs_SetControlIntValue_Name = NULL;
static PyObject* gs_SetControlStringValue_Name = NULL;
static PyObject* gs_SetValueToUnspecified_Name = NULL;
static PyObject* gs_StringToValue_Name = NULL;
static PyObject* gs_UpdateControl_Name = NULL;
static PyObject* gs_ValidateValue_Name = NULL;
static PyObject* gs_ValueToString_Name = NULL;

static void _InitFuncNames()
{
    gs___dict___Name = PyString_FromString("__dict__");
    gs___class___Name = PyString_FromString("__class__");
    gs__super_call_Name = PyString_FromString("_super_call");
    gs_CanContainCustomImage_Name = PyString_FromString("CanContainCustomImage_t_");
    gs_ChildChanged_Name = PyString_FromString("ChildChanged_t_");
    gs_ColourToString_Name = PyString_FromString("ColourToString_t_");
    gs_ConvertArrayToString_Name = PyString_FromString("ConvertArrayToString_t_");
    gs_CreateControls_Name = PyString_FromString("CreateControls_t_");
    gs_CreateEditorDialog_Name = PyString_FromString("CreateEditorDialog_t_");
    gs_DeleteItem_Name = PyString_FromString("DeleteItem_t_");
    gs_DoGetAttribute_Name = PyString_FromString("DoGetAttribute_t_");
    gs_DoGetValidator_Name = PyString_FromString("DoGetValidator_t_");
    gs_DoGetValue_Name = PyString_FromString("DoGetValue_t_");
    gs_DoSetAttribute_Name = PyString_FromString("DoSetAttribute_t_");
    gs_DoShowDialog_Name = PyString_FromString("DoShowDialog_t_");
    gs_DoTranslateVal_Name = PyString_FromString("DoTranslateVal_t_");
    gs_DrawValue_Name = PyString_FromString("DrawValue_t_");
    gs_GenerateValueAsString_Name = PyString_FromString("GenerateValueAsString_t_");
    gs_GetCellRenderer_Name = PyString_FromString("GetCellRenderer_t_");
    gs_GetChoiceSelection_Name = PyString_FromString("GetChoiceSelection_t_");
    gs_GetColour_Name = PyString_FromString("GetColour_t_");
    gs_GetCustomColourIndex_Name = PyString_FromString("GetCustomColourIndex_t_");
    gs_GetEditor_Name = PyString_FromString("GetEditor_t_");
    gs_GetEditorDialog_Name = PyString_FromString("GetEditorDialog_t_");
    gs_GetIndexForValue_Name = PyString_FromString("GetIndexForValue_t_");
    gs_GetName_Name = PyString_FromString("GetName_t_");
    gs_GetValueAsString_Name = PyString_FromString("GetValueAsString_t_");
    gs_GetValueFromControl_Name = PyString_FromString("GetValueFromControl_t_");
    gs_InsertItem_Name = PyString_FromString("InsertItem_t_");
    gs_IntToValue_Name = PyString_FromString("IntToValue_t_");
    gs_OnButtonClick_Name = PyString_FromString("OnButtonClick_t_");
    gs_OnCustomPaint_Name = PyString_FromString("OnCustomPaint_t_");
    gs_OnCustomStringEdit_Name = PyString_FromString("OnCustomStringEdit_t_");
    gs_OnEvent_Name = PyString_FromString("OnEvent_t_");
    gs_OnFocus_Name = PyString_FromString("OnFocus_t_");
    gs_OnMeasureImage_Name = PyString_FromString("OnMeasureImage_t_");
    gs_OnSetValue_Name = PyString_FromString("OnSetValue_t_");
    gs_OnValidationFailure_Name = PyString_FromString("OnValidationFailure_t_");
    gs_RefreshChildren_Name = PyString_FromString("RefreshChildren_t_");
    gs_SetControlAppearance_Name = PyString_FromString("SetControlAppearance_t_");
    gs_SetControlIntValue_Name = PyString_FromString("SetControlIntValue_t_");
    gs_SetControlStringValue_Name = PyString_FromString("SetControlStringValue_t_");
    gs_SetValueToUnspecified_Name = PyString_FromString("SetValueToUnspecified_t_");
    gs_StringToValue_Name = PyString_FromString("StringToValue_t_");
    gs_UpdateControl_Name = PyString_FromString("UpdateControl_t_");
    gs_ValidateValue_Name = PyString_FromString("ValidateValue_t_");
    gs_ValueToString_Name = PyString_FromString("ValueToString_t_");
    gs_funcNamesInitialized = true;
}


void _CommonCallback28(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxDC& dc, const wxRect& rect, wxPGProperty* property, const wxString& text)
{
    PyObject* res;
    PyObject* py_dc;
    py_dc = SWIG_NewPointerObj((void*)&dc, SWIGTYPE_p_wxDC, 0);
    PyObject* py_rect;
    py_rect = SWIG_NewPointerObj((void*)&rect, SWIGTYPE_p_wxRect, 0);
    PyObject* py_property;
    py_property = SWIG_NewPointerObj((void*)property, SWIGTYPE_p_wxPGProperty, 0);
    PyObject* py_text;
    #if wxUSE_UNICODE
        py_text = PyUnicode_FromWideChar((&text)->c_str(), (&text)->Len());
    #else
        py_text = PyString_FromStringAndSize((&text)->c_str(), (&text)->Len());
    #endif

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_dc, py_rect, py_property, py_text, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_text);
    Py_DECREF(py_property);
    Py_DECREF(py_rect);
    Py_DECREF(py_dc);
    if (PyErr_Occurred()) SWIG_fail;
    {
    Py_DECREF(res);
    }
  fail:
    wxPyEndBlockThreads(blocked);
}

wxString _CommonCallback36(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, const wxColour& col, int index)
{
    PyObject* res;
    PyObject* py_col;
    py_col = SWIG_NewPointerObj((void*)&col, SWIGTYPE_p_wxColour, 0);
    PyObject* py_index;
    py_index = PyInt_FromLong((long)index);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_col, py_index, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_index);
    Py_DECREF(py_col);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxString retval;
    wxString* sptr = wxString_in_helper(res);
        if (sptr == NULL) SWIG_fail;
        retval = *sptr;
        delete sptr;
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxEmptyString;
}

wxSize _CommonCallback11(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, int item)
{
    PyObject* res;
    PyObject* py_item;
    py_item = PyInt_FromLong((long)item);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_item, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_item);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxSize retval;
    wxSize temp;    wxSize* _tptr_0 = &retval;
        if ( ! wxSize_helper(res, &_tptr_0)) SWIG_fail;
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxSize();
}

void _CommonCallback34(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxPGProperty* property, wxWindow* ctrl, int value)
{
    PyObject* res;
    PyObject* py_property;
    py_property = SWIG_NewPointerObj((void*)property, SWIGTYPE_p_wxPGProperty, 0);
    PyObject* py_ctrl;
    py_ctrl = wxPyMake_wxObject(ctrl, (bool)0);

    PyObject* py_value;
    py_value = PyInt_FromLong((long)value);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_property, py_ctrl, py_value, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_value);
    Py_DECREF(py_ctrl);
    Py_DECREF(py_property);
    if (PyErr_Occurred()) SWIG_fail;
    {
    Py_DECREF(res);
    }
  fail:
    wxPyEndBlockThreads(blocked);
}

int _CommonCallback6(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj)
{
    PyObject* res;
    res = PyObject_CallFunctionObjArgs(funcobj, self, NULL);
    Py_DECREF(funcobj);
    if (PyErr_Occurred()) SWIG_fail;
    {
    int retval;
    retval = (int)PyInt_AS_LONG(res);
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return 0;
}

wxValidator* _CommonCallback2(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj)
{
    PyObject* res;
    res = PyObject_CallFunctionObjArgs(funcobj, self, NULL);
    Py_DECREF(funcobj);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxValidator* retval;
    if ( !SWIG_IsOK(SWIG_ConvertPtr(res, (void**)&(retval), SWIGTYPE_p_wxValidator, 0)) ) {
        PyErr_SetString(PyExc_TypeError,"expected wxValidator");
        SWIG_fail;
    }
    PyObject_SetAttrString(res, "thisown", Py_False);
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return NULL;
}

wxPGVariantAndBool _CommonCallback15(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, int number, int argFlags)
{
    PyObject* res;
    PyObject* py_number;
    py_number = PyInt_FromLong((long)number);

    PyObject* py_argFlags;
    py_argFlags = PyInt_FromLong((long)argFlags);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_number, py_argFlags, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_argFlags);
    Py_DECREF(py_number);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxPGVariantAndBool retval;
    if ( !PyObject_to_wxPGVariantAndBool(res, retval) ) {
            PyErr_SetString(PyExc_TypeError,
                "this Python type cannot be converted to wxPGVariantAndBool");
            SWIG_fail;
        }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxPGVariantAndBool();
}

wxColour _CommonCallback38(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, int index)
{
    PyObject* res;
    PyObject* py_index;
    py_index = PyInt_FromLong((long)index);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_index, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_index);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxColour retval;
    wxColour temp;    wxColour* _tptr_0 = &retval;
        if ( ! wxColour_helper(res, &_tptr_0)) SWIG_fail;
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxColour();
}

void _CommonCallback33(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxPropertyGrid* pg, wxPGProperty* property, wxWindow* ctrl, const wxPGCell& appearance, const wxPGCell& oldAppearance, bool unspecified)
{
    PyObject* res;
    PyObject* py_pg;
    py_pg = SWIG_NewPointerObj((void*)pg, SWIGTYPE_p_wxPropertyGrid, 0);
    PyObject* py_property;
    py_property = SWIG_NewPointerObj((void*)property, SWIGTYPE_p_wxPGProperty, 0);
    PyObject* py_ctrl;
    py_ctrl = wxPyMake_wxObject(ctrl, (bool)0);

    PyObject* py_appearance;
    py_appearance = SWIG_NewPointerObj((void*)&appearance, SWIGTYPE_p_wxPGCell, 0);
    PyObject* py_oldAppearance;
    py_oldAppearance = SWIG_NewPointerObj((void*)&oldAppearance, SWIGTYPE_p_wxPGCell, 0);
    PyObject* py_unspecified;
    py_unspecified = PyBool_FromLong((long)unspecified);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_pg, py_property, py_ctrl, py_appearance, py_oldAppearance, py_unspecified, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_unspecified);
    Py_DECREF(py_oldAppearance);
    Py_DECREF(py_appearance);
    Py_DECREF(py_ctrl);
    Py_DECREF(py_property);
    Py_DECREF(py_pg);
    if (PyErr_Occurred()) SWIG_fail;
    {
    Py_DECREF(res);
    }
  fail:
    wxPyEndBlockThreads(blocked);
}

wxVariant _CommonCallback3(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj)
{
    PyObject* res;
    res = PyObject_CallFunctionObjArgs(funcobj, self, NULL);
    Py_DECREF(funcobj);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxVariant retval;
    if ( !PyObject_to_wxVariant(res, &retval) ) {
            PyErr_SetString(PyExc_TypeError,
                            "this Python type cannot be converted to wxVariant");
            SWIG_fail;
        }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxVariant();
}

wxPGWindowList _CommonCallback26(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxPropertyGrid* propgrid, wxPGProperty* property, const wxPoint& pos, const wxSize& size)
{
    PyObject* res;
    PyObject* py_propgrid;
    py_propgrid = SWIG_NewPointerObj((void*)propgrid, SWIGTYPE_p_wxPropertyGrid, 0);
    PyObject* py_property;
    py_property = SWIG_NewPointerObj((void*)property, SWIGTYPE_p_wxPGProperty, 0);
    PyObject* py_pos;
    py_pos = wxPoint_to_PyObject((&pos));

    PyObject* py_size;
    py_size = wxSize_to_PyObject((&size));

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_propgrid, py_property, py_pos, py_size, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_size);
    Py_DECREF(py_pos);
    Py_DECREF(py_property);
    Py_DECREF(py_propgrid);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxPGWindowList retval;
    if ( !PyObject_to_wxPGWindowList(res, &retval) ) {
            PyErr_SetString(PyExc_TypeError,
                "expected wxWindow or tuple of two wxWindows");
            SWIG_fail;
        }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxPGWindowList();
}

wxString _CommonCallback18(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxVariant& value, int argFlags)
{
    PyObject* res;
    PyObject* py_value;
    py_value = wxVariant_to_PyObject((&value));
        if ( !py_value ) {
            PyErr_SetString(PyExc_TypeError,
                "this wxVariant type cannot be converted to Python object");
            SWIG_fail;
        }

    PyObject* py_argFlags;
    py_argFlags = PyInt_FromLong((long)argFlags);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_value, py_argFlags, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_argFlags);
    Py_DECREF(py_value);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxString retval;
    wxString* sptr = wxString_in_helper(res);
        if (sptr == NULL) SWIG_fail;
        retval = *sptr;
        delete sptr;
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxEmptyString;
}

bool _CommonCallback30(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxPropertyGrid* propgrid, wxPGProperty* property, wxWindow* ctrl, wxEvent& event)
{
    PyObject* res;
    PyObject* py_propgrid;
    py_propgrid = SWIG_NewPointerObj((void*)propgrid, SWIGTYPE_p_wxPropertyGrid, 0);
    PyObject* py_property;
    py_property = SWIG_NewPointerObj((void*)property, SWIGTYPE_p_wxPGProperty, 0);
    PyObject* py_ctrl;
    py_ctrl = wxPyMake_wxObject(ctrl, (bool)0);

    PyObject* py_event;
    py_event = SWIG_NewPointerObj((void*)&event, SWIGTYPE_p_wxEvent, 0);
    res = PyObject_CallFunctionObjArgs(funcobj, self, py_propgrid, py_property, py_ctrl, py_event, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_event);
    Py_DECREF(py_ctrl);
    Py_DECREF(py_property);
    Py_DECREF(py_propgrid);
    if (PyErr_Occurred()) SWIG_fail;
    {
    bool retval;
        if ( !SWIG_IsOK(SWIG_AsVal_bool(res, &retval)) ) {
        PyErr_SetString(PyExc_TypeError,"expected bool");
        SWIG_fail;
    }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return false;
}

bool _CommonCallback10(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxPropertyGrid* propgrid, wxWindow* wnd_primary, wxEvent& event)
{
    PyObject* res;
    PyObject* py_propgrid;
    py_propgrid = SWIG_NewPointerObj((void*)propgrid, SWIGTYPE_p_wxPropertyGrid, 0);
    PyObject* py_wnd_primary;
    py_wnd_primary = wxPyMake_wxObject(wnd_primary, (bool)0);

    PyObject* py_event;
    py_event = SWIG_NewPointerObj((void*)&event, SWIGTYPE_p_wxEvent, 0);
    res = PyObject_CallFunctionObjArgs(funcobj, self, py_propgrid, py_wnd_primary, py_event, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_event);
    Py_DECREF(py_wnd_primary);
    Py_DECREF(py_propgrid);
    if (PyErr_Occurred()) SWIG_fail;
    {
    bool retval;
        if ( !SWIG_IsOK(SWIG_AsVal_bool(res, &retval)) ) {
        PyErr_SetString(PyExc_TypeError,"expected bool");
        SWIG_fail;
    }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return false;
}

wxPGVariantAndBool _CommonCallback32(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxPGProperty* property, wxWindow* ctrl)
{
    PyObject* res;
    PyObject* py_property;
    py_property = SWIG_NewPointerObj((void*)property, SWIGTYPE_p_wxPGProperty, 0);
    PyObject* py_ctrl;
    py_ctrl = wxPyMake_wxObject(ctrl, (bool)0);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_property, py_ctrl, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_ctrl);
    Py_DECREF(py_property);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxPGVariantAndBool retval;
    if ( !PyObject_to_wxPGVariantAndBool(res, retval) ) {
            PyErr_SetString(PyExc_TypeError,
                "this Python type cannot be converted to wxPGVariantAndBool");
            SWIG_fail;
        }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxPGVariantAndBool();
}

wxPGVariantAndBool _CommonCallback16(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, const wxString& text, int argFlags)
{
    PyObject* res;
    PyObject* py_text;
    #if wxUSE_UNICODE
        py_text = PyUnicode_FromWideChar((&text)->c_str(), (&text)->Len());
    #else
        py_text = PyString_FromStringAndSize((&text)->c_str(), (&text)->Len());
    #endif

    PyObject* py_argFlags;
    py_argFlags = PyInt_FromLong((long)argFlags);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_text, py_argFlags, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_argFlags);
    Py_DECREF(py_text);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxPGVariantAndBool retval;
    if ( !PyObject_to_wxPGVariantAndBool(res, retval) ) {
            PyErr_SetString(PyExc_TypeError,
                "this Python type cannot be converted to wxPGVariantAndBool");
            SWIG_fail;
        }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxPGVariantAndBool();
}

bool _CommonCallback25(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj)
{
    PyObject* res;
    res = PyObject_CallFunctionObjArgs(funcobj, self, NULL);
    Py_DECREF(funcobj);
    if (PyErr_Occurred()) SWIG_fail;
    {
    bool retval;
        if ( !SWIG_IsOK(SWIG_AsVal_bool(res, &retval)) ) {
        PyErr_SetString(PyExc_TypeError,"expected bool");
        SWIG_fail;
    }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return false;
}

void _CommonCallback35(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxPGProperty* property, wxWindow* ctrl, const wxString& txt)
{
    PyObject* res;
    PyObject* py_property;
    py_property = SWIG_NewPointerObj((void*)property, SWIGTYPE_p_wxPGProperty, 0);
    PyObject* py_ctrl;
    py_ctrl = wxPyMake_wxObject(ctrl, (bool)0);

    PyObject* py_txt;
    #if wxUSE_UNICODE
        py_txt = PyUnicode_FromWideChar((&txt)->c_str(), (&txt)->Len());
    #else
        py_txt = PyString_FromStringAndSize((&txt)->c_str(), (&txt)->Len());
    #endif

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_property, py_ctrl, py_txt, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_txt);
    Py_DECREF(py_ctrl);
    Py_DECREF(py_property);
    if (PyErr_Occurred()) SWIG_fail;
    {
    Py_DECREF(res);
    }
  fail:
    wxPyEndBlockThreads(blocked);
}

bool _CommonCallback4(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, const wxString& name, wxVariant& value)
{
    PyObject* res;
    PyObject* py_name;
    #if wxUSE_UNICODE
        py_name = PyUnicode_FromWideChar((&name)->c_str(), (&name)->Len());
    #else
        py_name = PyString_FromStringAndSize((&name)->c_str(), (&name)->Len());
    #endif

    PyObject* py_value;
    py_value = wxVariant_to_PyObject((&value));
        if ( !py_value ) {
            PyErr_SetString(PyExc_TypeError,
                "this wxVariant type cannot be converted to Python object");
            SWIG_fail;
        }

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_name, py_value, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_value);
    Py_DECREF(py_name);
    if (PyErr_Occurred()) SWIG_fail;
    {
    bool retval;
        if ( !SWIG_IsOK(SWIG_AsVal_bool(res, &retval)) ) {
        PyErr_SetString(PyExc_TypeError,"expected bool");
        SWIG_fail;
    }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return false;
}

void _CommonCallback31(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxPGProperty* property, wxWindow* wnd)
{
    PyObject* res;
    PyObject* py_property;
    py_property = SWIG_NewPointerObj((void*)property, SWIGTYPE_p_wxPGProperty, 0);
    PyObject* py_wnd;
    py_wnd = wxPyMake_wxObject(wnd, (bool)0);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_property, py_wnd, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_wnd);
    Py_DECREF(py_property);
    if (PyErr_Occurred()) SWIG_fail;
    {
    Py_DECREF(res);
    }
  fail:
    wxPyEndBlockThreads(blocked);
}

wxString _CommonCallback14(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj)
{
    PyObject* res;
    res = PyObject_CallFunctionObjArgs(funcobj, self, NULL);
    Py_DECREF(funcobj);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxString retval;
    wxString* sptr = wxString_in_helper(res);
        if (sptr == NULL) SWIG_fail;
        retval = *sptr;
        delete sptr;
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxEmptyString;
}

wxVariant _CommonCallback0(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxVariant& thisValue, int childIndex, wxVariant& childValue)
{
    PyObject* res;
    PyObject* py_thisValue;
    py_thisValue = wxVariant_to_PyObject((&thisValue));
        if ( !py_thisValue ) {
            PyErr_SetString(PyExc_TypeError,
                "this wxVariant type cannot be converted to Python object");
            SWIG_fail;
        }

    PyObject* py_childIndex;
    py_childIndex = PyInt_FromLong((long)childIndex);

    PyObject* py_childValue;
    py_childValue = wxVariant_to_PyObject((&childValue));
        if ( !py_childValue ) {
            PyErr_SetString(PyExc_TypeError,
                "this wxVariant type cannot be converted to Python object");
            SWIG_fail;
        }

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_thisValue, py_childIndex, py_childValue, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_childValue);
    Py_DECREF(py_childIndex);
    Py_DECREF(py_thisValue);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxVariant retval;
    if ( !PyObject_to_wxVariant(res, &retval) ) {
            PyErr_SetString(PyExc_TypeError,
                            "this Python type cannot be converted to wxVariant");
            SWIG_fail;
        }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxVariant();
}

void _CommonCallback12(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj)
{
    PyObject* res;
    res = PyObject_CallFunctionObjArgs(funcobj, self, NULL);
    Py_DECREF(funcobj);
    if (PyErr_Occurred()) SWIG_fail;
    {
    Py_DECREF(res);
    }
  fail:
    wxPyEndBlockThreads(blocked);
}

wxVariant _CommonCallback1(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, const wxString& name)
{
    PyObject* res;
    PyObject* py_name;
    #if wxUSE_UNICODE
        py_name = PyUnicode_FromWideChar((&name)->c_str(), (&name)->Len());
    #else
        py_name = PyString_FromStringAndSize((&name)->c_str(), (&name)->Len());
    #endif

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_name, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_name);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxVariant retval;
    if ( !PyObject_to_wxVariant(res, &retval) ) {
            PyErr_SetString(PyExc_TypeError,
                            "this Python type cannot be converted to wxVariant");
            SWIG_fail;
        }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxVariant();
}

wxPGCellRenderer* _CommonCallback5(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, int column)
{
    PyObject* res;
    PyObject* py_column;
    py_column = PyInt_FromLong((long)column);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_column, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_column);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxPGCellRenderer* retval;
    if ( !SWIG_IsOK(SWIG_ConvertPtr(res, (void**)&(retval), SWIGTYPE_p_wxPGCellRenderer, 0)) ) {
        PyErr_SetString(PyExc_TypeError,"expected wxPGCellRenderer");
        SWIG_fail;
    }
    PyObject_SetAttrString(res, "thisown", Py_False);
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return NULL;
}

bool _CommonCallback19(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxPropertyGrid* propGrid, wxPGProperty* property)
{
    PyObject* res;
    PyObject* py_propGrid;
    py_propGrid = SWIG_NewPointerObj((void*)propGrid, SWIGTYPE_p_wxPropertyGrid, 0);
    PyObject* py_property;
    py_property = SWIG_NewPointerObj((void*)property, SWIGTYPE_p_wxPGProperty, 0);
    res = PyObject_CallFunctionObjArgs(funcobj, self, py_propGrid, py_property, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_property);
    Py_DECREF(py_propGrid);
    if (PyErr_Occurred()) SWIG_fail;
    {
    bool retval;
        if ( !SWIG_IsOK(SWIG_AsVal_bool(res, &retval)) ) {
        PyErr_SetString(PyExc_TypeError,"expected bool");
        SWIG_fail;
    }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return false;
}

int _CommonCallback20(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, int value)
{
    PyObject* res;
    PyObject* py_value;
    py_value = PyInt_FromLong((long)value);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_value, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_value);
    if (PyErr_Occurred()) SWIG_fail;
    {
    int retval;
    retval = (int)PyInt_AS_LONG(res);
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return 0;
}

wxVariant _CommonCallback37(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxColourPropertyValue& v)
{
    PyObject* res;
    PyObject* py_v;
    py_v = SWIG_NewPointerObj((void*)&v, SWIGTYPE_p_wxColourPropertyValue, 0);
    res = PyObject_CallFunctionObjArgs(funcobj, self, py_v, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_v);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxVariant retval;
    if ( !PyObject_to_wxVariant(res, &retval) ) {
            PyErr_SetString(PyExc_TypeError,
                            "this Python type cannot be converted to wxVariant");
            SWIG_fail;
        }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxVariant();
}

wxString _CommonCallback8(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, int argFlags)
{
    PyObject* res;
    PyObject* py_argFlags;
    py_argFlags = PyInt_FromLong((long)argFlags);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_argFlags, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_argFlags);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxString retval;
    wxString* sptr = wxString_in_helper(res);
        if (sptr == NULL) SWIG_fail;
        retval = *sptr;
        delete sptr;
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxEmptyString;
}

wxPGEditorDialogAdapter* _CommonCallback7(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj)
{
    PyObject* res;
    res = PyObject_CallFunctionObjArgs(funcobj, self, NULL);
    Py_DECREF(funcobj);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxPGEditorDialogAdapter* retval;
    if ( !SWIG_IsOK(SWIG_ConvertPtr(res, (void**)&(retval), SWIGTYPE_p_wxPGEditorDialogAdapter, 0)) ) {
        PyErr_SetString(PyExc_TypeError,"expected wxPGEditorDialogAdapter");
        SWIG_fail;
    }
    PyObject_SetAttrString(res, "thisown", Py_False);
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return NULL;
}

void _CommonCallback13(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxVariant& pendingValue)
{
    PyObject* res;
    PyObject* py_pendingValue;
    py_pendingValue = wxVariant_to_PyObject((&pendingValue));
        if ( !py_pendingValue ) {
            PyErr_SetString(PyExc_TypeError,
                "this wxVariant type cannot be converted to Python object");
            SWIG_fail;
        }

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_pendingValue, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_pendingValue);
    if (PyErr_Occurred()) SWIG_fail;
    {
    Py_DECREF(res);
    }
  fail:
    wxPyEndBlockThreads(blocked);
}

void _CommonCallback27(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxWindow* ctrl, int index)
{
    PyObject* res;
    PyObject* py_ctrl;
    py_ctrl = wxPyMake_wxObject(ctrl, (bool)0);

    PyObject* py_index;
    py_index = PyInt_FromLong((long)index);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_ctrl, py_index, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_index);
    Py_DECREF(py_ctrl);
    if (PyErr_Occurred()) SWIG_fail;
    {
    Py_DECREF(res);
    }
  fail:
    wxPyEndBlockThreads(blocked);
}

void _CommonCallback9(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    PyObject* res;
    PyObject* py_dc;
    py_dc = SWIG_NewPointerObj((void*)&dc, SWIGTYPE_p_wxDC, 0);
    PyObject* py_rect;
    py_rect = SWIG_NewPointerObj((void*)&rect, SWIGTYPE_p_wxRect, 0);
    PyObject* py_paintdata;
    py_paintdata = SWIG_NewPointerObj((void*)&paintdata, SWIGTYPE_p_wxPGPaintData, 0);
    res = PyObject_CallFunctionObjArgs(funcobj, self, py_dc, py_rect, py_paintdata, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_paintdata);
    Py_DECREF(py_rect);
    Py_DECREF(py_dc);
    if (PyErr_Occurred()) SWIG_fail;
    {
    Py_DECREF(res);
    }
  fail:
    wxPyEndBlockThreads(blocked);
}

wxPGVariantAndBool _CommonCallback17(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, const wxVariant& value, wxPGValidationInfo& validationInfo)
{
    PyObject* res;
    PyObject* py_value;
    py_value = wxVariant_to_PyObject((&value));
        if ( !py_value ) {
            PyErr_SetString(PyExc_TypeError,
                "this wxVariant type cannot be converted to Python object");
            SWIG_fail;
        }

    PyObject* py_validationInfo;
    py_validationInfo = SWIG_NewPointerObj((void*)&validationInfo, SWIGTYPE_p_wxPGValidationInfo, 0);
    res = PyObject_CallFunctionObjArgs(funcobj, self, py_value, py_validationInfo, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_validationInfo);
    Py_DECREF(py_value);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxPGVariantAndBool retval;
    if ( !PyObject_to_wxPGVariantAndBool(res, retval) ) {
            PyErr_SetString(PyExc_TypeError,
                "this Python type cannot be converted to wxPGVariantAndBool");
            SWIG_fail;
        }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return wxPGVariantAndBool();
}

int _CommonCallback29(wxPyBlock_t blocked, PyObject* self, PyObject* funcobj, wxWindow* ctrl, const wxString& label, int index)
{
    PyObject* res;
    PyObject* py_ctrl;
    py_ctrl = wxPyMake_wxObject(ctrl, (bool)0);

    PyObject* py_label;
    #if wxUSE_UNICODE
        py_label = PyUnicode_FromWideChar((&label)->c_str(), (&label)->Len());
    #else
        py_label = PyString_FromStringAndSize((&label)->c_str(), (&label)->Len());
    #endif

    PyObject* py_index;
    py_index = PyInt_FromLong((long)index);

    res = PyObject_CallFunctionObjArgs(funcobj, self, py_ctrl, py_label, py_index, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_index);
    Py_DECREF(py_label);
    Py_DECREF(py_ctrl);
    if (PyErr_Occurred()) SWIG_fail;
    {
    int retval;
    retval = (int)PyInt_AS_LONG(res);
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return 0;
}

class PyFloatProperty : public wxFloatProperty {
public:
        PyFloatProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                     const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                     double value = 0.0 );
    virtual ~PyFloatProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* wnd_primary,
                          wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyFloatProperty_pyClass = NULL;


PyFloatProperty::PyFloatProperty(const wxString& label, const wxString& name, double value)
    : wxFloatProperty(label, name, value)
{
    Init();
}

PyFloatProperty::~PyFloatProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyFloatProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyFloatProperty_pyClass )
    {
        gs_PyFloatProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyFloatProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyFloatProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyFloatProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxFloatProperty::ValidateValue(value, validationInfo);
}

bool PyFloatProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxFloatProperty::StringToValue(variant, text, argFlags);
}

bool PyFloatProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxFloatProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyFloatProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxVariant PyFloatProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyFloatProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyFloatProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyFloatProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxPGCellRenderer* PyFloatProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyFloatProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyFloatProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyFloatProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PyFloatProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFloatProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyFloatProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* wnd_primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::OnEvent(propgrid, wnd_primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, wnd_primary, event);
}


wxSize PyFloatProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyFloatProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFloatProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyFloatProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFloatProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyFloatProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyFloatProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxFloatProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyFloatProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxFloatProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyFloatProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxFloatProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyFloatProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFloatProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyFloatProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFloatProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyEditorDialogAdapter : public wxPGEditorDialogAdapter {
public:
        PyEditorDialogAdapter();
    virtual ~PyEditorDialogAdapter();
    void _SetSelf(PyObject *self);
    virtual bool DoShowDialog( wxPropertyGrid* propGrid,
                               wxPGProperty* property );
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyEditorDialogAdapter_pyClass = NULL;


PyEditorDialogAdapter::PyEditorDialogAdapter()
    : wxPGEditorDialogAdapter()
{
    Init();
}

PyEditorDialogAdapter::~PyEditorDialogAdapter()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyEditorDialogAdapter::_SetSelf(PyObject *self)
{
    if ( !gs_PyEditorDialogAdapter_pyClass )
    {
        gs_PyEditorDialogAdapter_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyEditorDialogAdapter_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}


bool PyEditorDialogAdapter::DoShowDialog(wxPropertyGrid* propGrid, wxPGProperty* property)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoShowDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoShowDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        PyErr_SetString(PyExc_TypeError,"this method must be implemented");
        return false;
    }
    return _CommonCallback19(blocked, (PyObject*)m_clientData, funcobj, propGrid, property);
}


class PyEnumProperty : public wxEnumProperty {
public:
        PyEnumProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                    const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                    const wxArrayString& labels = wxArrayString(),
                    const wxArrayInt& values = wxArrayInt(),
                    int value = 0 );
    virtual ~PyEnumProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual int GetIndexForValue( int value ) const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* wnd_primary,
                          wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyEnumProperty_pyClass = NULL;


PyEnumProperty::PyEnumProperty(const wxString& label, const wxString& name, const wxArrayString& labels, const wxArrayInt& values, int value)
    : wxEnumProperty(label, name, labels, values, value)
{
    Init();
}

PyEnumProperty::~PyEnumProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyEnumProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyEnumProperty_pyClass )
    {
        gs_PyEnumProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyEnumProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyEnumProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyEnumProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxEnumProperty::ValidateValue(value, validationInfo);
}

bool PyEnumProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxEnumProperty::StringToValue(variant, text, argFlags);
}

bool PyEnumProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxEnumProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyEnumProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxVariant PyEnumProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyEnumProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyEnumProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyEnumProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxPGCellRenderer* PyEnumProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyEnumProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyEnumProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


int PyEnumProperty::GetIndexForValue(int value) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetIndexForValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetIndexForValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::GetIndexForValue(value);
    }
    return _CommonCallback20(blocked, (PyObject*)m_clientData, funcobj, value);
}


wxString PyEnumProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PyEnumProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxEnumProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyEnumProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* wnd_primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::OnEvent(propgrid, wnd_primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, wnd_primary, event);
}


wxSize PyEnumProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyEnumProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxEnumProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyEnumProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxEnumProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyEnumProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyEnumProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxEnumProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyEnumProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxEnumProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyEnumProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxEnumProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyEnumProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxEnumProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyEnumProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEnumProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyArrayStringProperty : public wxArrayStringProperty {
public:
        PyArrayStringProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                           const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                           const wxArrayString& value = wxArrayString() );
    virtual ~PyArrayStringProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual void ConvertArrayToString(const wxArrayString& arr,
                                      wxString* pString,
                                      const wxUniChar& delimiter) const;
    virtual wxPGArrayEditorDialog* CreateEditorDialog();
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual void GenerateValueAsString();
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual bool OnButtonClick( wxPropertyGrid* propgrid,
                                wxWindow* primary,
                                const wxChar* cbt );
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnCustomStringEdit( wxWindow* parent, wxString& value );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* primary, wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyArrayStringProperty_pyClass = NULL;


PyArrayStringProperty::PyArrayStringProperty(const wxString& label, const wxString& name, const wxArrayString& value)
    : wxArrayStringProperty(label, name, value)
{
    Init();
}

PyArrayStringProperty::~PyArrayStringProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyArrayStringProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyArrayStringProperty_pyClass )
    {
        gs_PyArrayStringProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyArrayStringProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyArrayStringProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyArrayStringProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxArrayStringProperty::ValidateValue(value, validationInfo);
}

bool PyArrayStringProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxArrayStringProperty::StringToValue(variant, text, argFlags);
}

bool PyArrayStringProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxArrayStringProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyArrayStringProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


void PyArrayStringProperty::ConvertArrayToString(const wxArrayString& arr, wxString* pString, const wxUniChar& delimiter) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ConvertArrayToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ConvertArrayToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxArrayStringProperty::ConvertArrayToString(arr, pString, delimiter);
        return;
    }
    PyObject* res;
    PyObject* py_arr;
    py_arr = wxArrayString2PyList_helper(*(&arr));

    PyObject* py_pString;
    #if wxUSE_UNICODE
        py_pString = PyUnicode_FromWideChar(pString->c_str(), pString->Len());
    #else
        py_pString = PyString_FromStringAndSize(pString->c_str(), pString->Len());
    #endif

    PyObject* py_delimiter;
    py_delimiter = SWIG_NewPointerObj((void*)&delimiter, SWIGTYPE_p_wxUniChar, 0);
    res = PyObject_CallFunctionObjArgs(funcobj, ((PyObject*)m_clientData), py_arr, py_pString, py_delimiter, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_delimiter);
    Py_DECREF(py_pString);
    Py_DECREF(py_arr);
    if (PyErr_Occurred()) SWIG_fail;
    {
    Py_DECREF(res);
    }
  fail:
    wxPyEndBlockThreads(blocked);
}


wxPGArrayEditorDialog* PyArrayStringProperty::CreateEditorDialog()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_CreateEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_CreateEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::CreateEditorDialog();
    }
    PyObject* res;
    res = PyObject_CallFunctionObjArgs(funcobj, ((PyObject*)m_clientData), NULL);
    Py_DECREF(funcobj);
    if (PyErr_Occurred()) SWIG_fail;
    {
    wxPGArrayEditorDialog* retval;
    if ( !SWIG_IsOK(SWIG_ConvertPtr(res, (void**)&(retval), SWIGTYPE_p_wxPGArrayEditorDialog, 0)) ) {
        PyErr_SetString(PyExc_TypeError,"expected wxPGArrayEditorDialog");
        SWIG_fail;
    }
    PyObject_SetAttrString(res, "thisown", Py_False);
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return NULL;
}


wxVariant PyArrayStringProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyArrayStringProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyArrayStringProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyArrayStringProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


void PyArrayStringProperty::GenerateValueAsString()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GenerateValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GenerateValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxArrayStringProperty::GenerateValueAsString();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGCellRenderer* PyArrayStringProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyArrayStringProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyArrayStringProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyArrayStringProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


bool PyArrayStringProperty::OnButtonClick(wxPropertyGrid* propgrid, wxWindow* primary, const wxChar* cbt)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnButtonClick_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnButtonClick_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::OnButtonClick(propgrid, primary, cbt);
    }
    PyObject* res;
    PyObject* py_propgrid;
    py_propgrid = SWIG_NewPointerObj((void*)propgrid, SWIGTYPE_p_wxPropertyGrid, 0);
    PyObject* py_primary;
    py_primary = wxPyMake_wxObject(primary, (bool)0);

    PyObject* py_cbt;
    #if wxUSE_UNICODE
        py_cbt = PyUnicode_FromWideChar(cbt, wxStrlen(cbt));
    #else
        py_cbt = PyString_FromStringAndSize(cbt, wxStrlen(cbt));
    #endif

    res = PyObject_CallFunctionObjArgs(funcobj, ((PyObject*)m_clientData), py_propgrid, py_primary, py_cbt, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_cbt);
    Py_DECREF(py_primary);
    Py_DECREF(py_propgrid);
    if (PyErr_Occurred()) SWIG_fail;
    {
    bool retval;
        if ( !SWIG_IsOK(SWIG_AsVal_bool(res, &retval)) ) {
        PyErr_SetString(PyExc_TypeError,"expected bool");
        SWIG_fail;
    }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return false;
}


void PyArrayStringProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxArrayStringProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyArrayStringProperty::OnCustomStringEdit(wxWindow* parent, wxString& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomStringEdit_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomStringEdit_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::OnCustomStringEdit(parent, value);
    }
    PyObject* res;
    PyObject* py_parent;
    py_parent = wxPyMake_wxObject(parent, (bool)0);

    PyObject* py_value;
    #if wxUSE_UNICODE
        py_value = PyUnicode_FromWideChar((&value)->c_str(), (&value)->Len());
    #else
        py_value = PyString_FromStringAndSize((&value)->c_str(), (&value)->Len());
    #endif

    res = PyObject_CallFunctionObjArgs(funcobj, ((PyObject*)m_clientData), py_parent, py_value, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_value);
    Py_DECREF(py_parent);
    if (PyErr_Occurred()) SWIG_fail;
    {
    bool retval;
        if ( !SWIG_IsOK(SWIG_AsVal_bool(res, &retval)) ) {
        PyErr_SetString(PyExc_TypeError,"expected bool");
        SWIG_fail;
    }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return false;
}


bool PyArrayStringProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::OnEvent(propgrid, primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, primary, event);
}


wxSize PyArrayStringProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyArrayStringProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxArrayStringProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyArrayStringProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxArrayStringProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyArrayStringProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyArrayStringProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxArrayStringProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyArrayStringProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxArrayStringProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyArrayStringProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxArrayStringProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyArrayStringProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxArrayStringProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyArrayStringProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxArrayStringProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyComboBoxEditor : public wxPGComboBoxEditor {
public:
        PyComboBoxEditor();
    virtual ~PyComboBoxEditor();
    void _SetSelf(PyObject *self);
    virtual bool GetValueFromControl(wxVariant& value, wxPGProperty* property, wxWindow* ctrl) const;
    virtual bool CanContainCustomImage() const;
    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
                                          wxPGProperty* property,
                                          const wxPoint& pos,
                                          const wxSize& size) const;
    virtual void DeleteItem( wxWindow* ctrl, int index ) const;
    virtual void DrawValue( wxDC& dc,
                            const wxRect& rect,
                            wxPGProperty* property,
                            const wxString& text ) const;
    virtual wxString GetName() const;
    virtual int InsertItem( wxWindow* ctrl,
                            const wxString& label,
                            int index ) const;
    virtual bool OnEvent( wxPropertyGrid* propgrid, wxPGProperty* property,
        wxWindow* ctrl, wxEvent& event ) const;
    virtual void OnFocus( wxPGProperty* property, wxWindow* wnd ) const;
    virtual wxPGVariantAndBool PyGetValueFromControl( wxPGProperty* property, wxWindow* ctrl ) const;
    virtual void SetControlAppearance( wxPropertyGrid* pg,
                                       wxPGProperty* property,
                                       wxWindow* ctrl,
                                       const wxPGCell& appearance,
                                       const wxPGCell& oldAppearance,
                                       bool unspecified ) const;
    virtual void SetControlIntValue( wxPGProperty* property,
                                     wxWindow* ctrl,
                                     int value ) const;
    virtual void SetControlStringValue( wxPGProperty* property,
                                        wxWindow* ctrl,
                                        const wxString& txt ) const;
    virtual void SetValueToUnspecified( wxPGProperty* property,
                                        wxWindow* ctrl ) const;
    virtual void UpdateControl( wxPGProperty* property, wxWindow* ctrl ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyComboBoxEditor_pyClass = NULL;


PyComboBoxEditor::PyComboBoxEditor()
    : wxPGComboBoxEditor()
{
    Init();
}

PyComboBoxEditor::~PyComboBoxEditor()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyComboBoxEditor::_SetSelf(PyObject *self)
{
    if ( !gs_PyComboBoxEditor_pyClass )
    {
        gs_PyComboBoxEditor_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyComboBoxEditor_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

bool PyComboBoxEditor::GetValueFromControl(wxVariant& value, wxPGProperty* property, wxWindow* ctrl) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyGetValueFromControl(property, ctrl);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxPGComboBoxEditor::GetValueFromControl(value, property, ctrl);
}


bool PyComboBoxEditor::CanContainCustomImage() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_CanContainCustomImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_CanContainCustomImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGComboBoxEditor::CanContainCustomImage();
    }
    return _CommonCallback25(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGWindowList PyComboBoxEditor::CreateControls(wxPropertyGrid* propgrid, wxPGProperty* property, const wxPoint& pos, const wxSize& size) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_CreateControls_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_CreateControls_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGComboBoxEditor::CreateControls(propgrid, property, pos, size);
    }
    return _CommonCallback26(blocked, (PyObject*)m_clientData, funcobj, propgrid, property, pos, size);
}


void PyComboBoxEditor::DeleteItem(wxWindow* ctrl, int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DeleteItem_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DeleteItem_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGComboBoxEditor::DeleteItem(ctrl, index);
        return;
    }
    _CommonCallback27(blocked, (PyObject*)m_clientData, funcobj, ctrl, index);
}


void PyComboBoxEditor::DrawValue(wxDC& dc, const wxRect& rect, wxPGProperty* property, const wxString& text) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DrawValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DrawValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGComboBoxEditor::DrawValue(dc, rect, property, text);
        return;
    }
    _CommonCallback28(blocked, (PyObject*)m_clientData, funcobj, dc, rect, property, text);
}


wxString PyComboBoxEditor::GetName() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetName_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetName_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGComboBoxEditor::GetName();
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


int PyComboBoxEditor::InsertItem(wxWindow* ctrl, const wxString& label, int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_InsertItem_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_InsertItem_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGComboBoxEditor::InsertItem(ctrl, label, index);
    }
    return _CommonCallback29(blocked, (PyObject*)m_clientData, funcobj, ctrl, label, index);
}


bool PyComboBoxEditor::OnEvent(wxPropertyGrid* propgrid, wxPGProperty* property, wxWindow* ctrl, wxEvent& event) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGComboBoxEditor::OnEvent(propgrid, property, ctrl, event);
    }
    return _CommonCallback30(blocked, (PyObject*)m_clientData, funcobj, propgrid, property, ctrl, event);
}


void PyComboBoxEditor::OnFocus(wxPGProperty* property, wxWindow* wnd) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnFocus_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnFocus_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGComboBoxEditor::OnFocus(property, wnd);
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, wnd);
}


wxPGVariantAndBool PyComboBoxEditor::PyGetValueFromControl(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueFromControl_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueFromControl_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxPGComboBoxEditor::GetValueFromControl(vab.m_value, property, ctrl);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback32(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


void PyComboBoxEditor::SetControlAppearance(wxPropertyGrid* pg, wxPGProperty* property, wxWindow* ctrl, const wxPGCell& appearance, const wxPGCell& oldAppearance, bool unspecified) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlAppearance_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlAppearance_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGComboBoxEditor::SetControlAppearance(pg, property, ctrl, appearance, oldAppearance, unspecified);
        return;
    }
    _CommonCallback33(blocked, (PyObject*)m_clientData, funcobj, pg, property, ctrl, appearance, oldAppearance, unspecified);
}


void PyComboBoxEditor::SetControlIntValue(wxPGProperty* property, wxWindow* ctrl, int value) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlIntValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlIntValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGComboBoxEditor::SetControlIntValue(property, ctrl, value);
        return;
    }
    _CommonCallback34(blocked, (PyObject*)m_clientData, funcobj, property, ctrl, value);
}


void PyComboBoxEditor::SetControlStringValue(wxPGProperty* property, wxWindow* ctrl, const wxString& txt) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlStringValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlStringValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGComboBoxEditor::SetControlStringValue(property, ctrl, txt);
        return;
    }
    _CommonCallback35(blocked, (PyObject*)m_clientData, funcobj, property, ctrl, txt);
}


void PyComboBoxEditor::SetValueToUnspecified(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetValueToUnspecified_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetValueToUnspecified_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGComboBoxEditor::SetValueToUnspecified(property, ctrl);
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


void PyComboBoxEditor::UpdateControl(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_UpdateControl_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_UpdateControl_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGComboBoxEditor::UpdateControl(property, ctrl);
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


class PyFileDialogAdapter : public wxPGFileDialogAdapter {
public:
        PyFileDialogAdapter();
    virtual ~PyFileDialogAdapter();
    void _SetSelf(PyObject *self);
    virtual bool DoShowDialog( wxPropertyGrid* propGrid,
                               wxPGProperty* property );
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyFileDialogAdapter_pyClass = NULL;


PyFileDialogAdapter::PyFileDialogAdapter()
    : wxPGFileDialogAdapter()
{
    Init();
}

PyFileDialogAdapter::~PyFileDialogAdapter()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyFileDialogAdapter::_SetSelf(PyObject *self)
{
    if ( !gs_PyFileDialogAdapter_pyClass )
    {
        gs_PyFileDialogAdapter_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyFileDialogAdapter_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}


bool PyFileDialogAdapter::DoShowDialog(wxPropertyGrid* propGrid, wxPGProperty* property)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoShowDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoShowDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGFileDialogAdapter::DoShowDialog(propGrid, property);
    }
    return _CommonCallback19(blocked, (PyObject*)m_clientData, funcobj, propGrid, property);
}


class PyStringProperty : public wxStringProperty {
public:
        PyStringProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                      const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                      const wxString& value = wxEmptyString );
    virtual ~PyStringProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* wnd_primary,
                          wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyStringProperty_pyClass = NULL;


PyStringProperty::PyStringProperty(const wxString& label, const wxString& name, const wxString& value)
    : wxStringProperty(label, name, value)
{
    Init();
}

PyStringProperty::~PyStringProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyStringProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyStringProperty_pyClass )
    {
        gs_PyStringProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyStringProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyStringProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyStringProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxStringProperty::ValidateValue(value, validationInfo);
}

bool PyStringProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxStringProperty::StringToValue(variant, text, argFlags);
}

bool PyStringProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxStringProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyStringProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxVariant PyStringProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyStringProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyStringProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyStringProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxPGCellRenderer* PyStringProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyStringProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyStringProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyStringProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PyStringProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxStringProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyStringProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* wnd_primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::OnEvent(propgrid, wnd_primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, wnd_primary, event);
}


wxSize PyStringProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyStringProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxStringProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyStringProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxStringProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyStringProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyStringProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxStringProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyStringProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxStringProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyStringProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxStringProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyStringProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxStringProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyStringProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxStringProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyLongStringDialogAdapter : public wxPGLongStringDialogAdapter {
public:
        PyLongStringDialogAdapter();
    virtual ~PyLongStringDialogAdapter();
    void _SetSelf(PyObject *self);
    virtual bool DoShowDialog( wxPropertyGrid* propGrid,
                               wxPGProperty* property );
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyLongStringDialogAdapter_pyClass = NULL;


PyLongStringDialogAdapter::PyLongStringDialogAdapter()
    : wxPGLongStringDialogAdapter()
{
    Init();
}

PyLongStringDialogAdapter::~PyLongStringDialogAdapter()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyLongStringDialogAdapter::_SetSelf(PyObject *self)
{
    if ( !gs_PyLongStringDialogAdapter_pyClass )
    {
        gs_PyLongStringDialogAdapter_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyLongStringDialogAdapter_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}


bool PyLongStringDialogAdapter::DoShowDialog(wxPropertyGrid* propGrid, wxPGProperty* property)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoShowDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoShowDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGLongStringDialogAdapter::DoShowDialog(propGrid, property);
    }
    return _CommonCallback19(blocked, (PyObject*)m_clientData, funcobj, propGrid, property);
}


class PyEditEnumProperty : public wxEditEnumProperty {
public:
        PyEditEnumProperty( const wxString& label,
                        const wxString& name,
                        const wxChar* const* labels,
                        const long* values,
                        const wxString& value );
    PyEditEnumProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                        const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                        const wxArrayString& labels = wxArrayString(),
                        const wxArrayInt& values = wxArrayInt(),
                        const wxString& value = wxEmptyString );
    PyEditEnumProperty( const wxString& label,
                        const wxString& name,
                        wxPGChoices& choices,
                        const wxString& value = wxEmptyString );
    PyEditEnumProperty( const wxString& label,
                        const wxString& name,
                        const wxChar* const* labels,
                        const long* values,
                        wxPGChoices* choicesCache,
                        const wxString& value );
    virtual ~PyEditEnumProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual int GetIndexForValue( int value ) const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* wnd_primary,
                          wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyEditEnumProperty_pyClass = NULL;


PyEditEnumProperty::PyEditEnumProperty(const wxString& label, const wxString& name, const wxChar* const* labels, const long* values, const wxString& value)
    : wxEditEnumProperty(label, name, labels, values, value)
{
    Init();
}

PyEditEnumProperty::PyEditEnumProperty(const wxString& label, const wxString& name, const wxArrayString& labels, const wxArrayInt& values, const wxString& value)
    : wxEditEnumProperty(label, name, labels, values, value)
{
    Init();
}

PyEditEnumProperty::PyEditEnumProperty(const wxString& label, const wxString& name, wxPGChoices& choices, const wxString& value)
    : wxEditEnumProperty(label, name, choices, value)
{
    Init();
}

PyEditEnumProperty::PyEditEnumProperty(const wxString& label, const wxString& name, const wxChar* const* labels, const long* values, wxPGChoices* choicesCache, const wxString& value)
    : wxEditEnumProperty(label, name, labels, values, choicesCache, value)
{
    Init();
}

PyEditEnumProperty::~PyEditEnumProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyEditEnumProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyEditEnumProperty_pyClass )
    {
        gs_PyEditEnumProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyEditEnumProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyEditEnumProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyEditEnumProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxEditEnumProperty::ValidateValue(value, validationInfo);
}

bool PyEditEnumProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxEditEnumProperty::StringToValue(variant, text, argFlags);
}

bool PyEditEnumProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxEditEnumProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyEditEnumProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxVariant PyEditEnumProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyEditEnumProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyEditEnumProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyEditEnumProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxPGCellRenderer* PyEditEnumProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyEditEnumProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyEditEnumProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


int PyEditEnumProperty::GetIndexForValue(int value) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetIndexForValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetIndexForValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::GetIndexForValue(value);
    }
    return _CommonCallback20(blocked, (PyObject*)m_clientData, funcobj, value);
}


wxString PyEditEnumProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PyEditEnumProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxEditEnumProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyEditEnumProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* wnd_primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::OnEvent(propgrid, wnd_primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, wnd_primary, event);
}


wxSize PyEditEnumProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyEditEnumProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxEditEnumProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyEditEnumProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxEditEnumProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyEditEnumProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyEditEnumProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxEditEnumProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyEditEnumProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxEditEnumProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyEditEnumProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxEditEnumProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyEditEnumProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxEditEnumProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyEditEnumProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxEditEnumProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyTextCtrlEditor : public wxPGTextCtrlEditor {
public:
        PyTextCtrlEditor();
    virtual ~PyTextCtrlEditor();
    void _SetSelf(PyObject *self);
    virtual bool GetValueFromControl(wxVariant& value, wxPGProperty* property, wxWindow* ctrl) const;
    virtual bool CanContainCustomImage() const;
    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
                                          wxPGProperty* property,
                                          const wxPoint& pos,
                                          const wxSize& size) const;
    virtual void DeleteItem( wxWindow* ctrl, int index ) const;
    virtual void DrawValue( wxDC& dc,
                            const wxRect& rect,
                            wxPGProperty* property,
                            const wxString& text ) const;
    virtual wxString GetName() const;
    virtual int InsertItem( wxWindow* ctrl,
                            const wxString& label,
                            int index ) const;
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxPGProperty* property,
                          wxWindow* primaryCtrl,
                          wxEvent& event ) const;
    virtual void OnFocus( wxPGProperty* property, wxWindow* wnd ) const;
    virtual wxPGVariantAndBool PyGetValueFromControl( wxPGProperty* property, wxWindow* ctrl ) const;
    virtual void SetControlAppearance( wxPropertyGrid* pg,
                                       wxPGProperty* property,
                                       wxWindow* ctrl,
                                       const wxPGCell& appearance,
                                       const wxPGCell& oldAppearance,
                                       bool unspecified ) const;
    virtual void SetControlIntValue( wxPGProperty* property,
                                     wxWindow* ctrl,
                                     int value ) const;
    virtual void SetControlStringValue( wxPGProperty* property,
                                        wxWindow* ctrl,
                                        const wxString& txt ) const;
    virtual void SetValueToUnspecified( wxPGProperty* property,
                                        wxWindow* ctrl ) const;
    virtual void UpdateControl( wxPGProperty* property,
                                wxWindow* ctrl ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyTextCtrlEditor_pyClass = NULL;


PyTextCtrlEditor::PyTextCtrlEditor()
    : wxPGTextCtrlEditor()
{
    Init();
}

PyTextCtrlEditor::~PyTextCtrlEditor()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyTextCtrlEditor::_SetSelf(PyObject *self)
{
    if ( !gs_PyTextCtrlEditor_pyClass )
    {
        gs_PyTextCtrlEditor_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyTextCtrlEditor_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

bool PyTextCtrlEditor::GetValueFromControl(wxVariant& value, wxPGProperty* property, wxWindow* ctrl) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyGetValueFromControl(property, ctrl);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxPGTextCtrlEditor::GetValueFromControl(value, property, ctrl);
}


bool PyTextCtrlEditor::CanContainCustomImage() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_CanContainCustomImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_CanContainCustomImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGTextCtrlEditor::CanContainCustomImage();
    }
    return _CommonCallback25(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGWindowList PyTextCtrlEditor::CreateControls(wxPropertyGrid* propgrid, wxPGProperty* property, const wxPoint& pos, const wxSize& size) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_CreateControls_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_CreateControls_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGTextCtrlEditor::CreateControls(propgrid, property, pos, size);
    }
    return _CommonCallback26(blocked, (PyObject*)m_clientData, funcobj, propgrid, property, pos, size);
}


void PyTextCtrlEditor::DeleteItem(wxWindow* ctrl, int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DeleteItem_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DeleteItem_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGTextCtrlEditor::DeleteItem(ctrl, index);
        return;
    }
    _CommonCallback27(blocked, (PyObject*)m_clientData, funcobj, ctrl, index);
}


void PyTextCtrlEditor::DrawValue(wxDC& dc, const wxRect& rect, wxPGProperty* property, const wxString& text) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DrawValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DrawValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGTextCtrlEditor::DrawValue(dc, rect, property, text);
        return;
    }
    _CommonCallback28(blocked, (PyObject*)m_clientData, funcobj, dc, rect, property, text);
}


wxString PyTextCtrlEditor::GetName() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetName_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetName_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGTextCtrlEditor::GetName();
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


int PyTextCtrlEditor::InsertItem(wxWindow* ctrl, const wxString& label, int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_InsertItem_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_InsertItem_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGTextCtrlEditor::InsertItem(ctrl, label, index);
    }
    return _CommonCallback29(blocked, (PyObject*)m_clientData, funcobj, ctrl, label, index);
}


bool PyTextCtrlEditor::OnEvent(wxPropertyGrid* propgrid, wxPGProperty* property, wxWindow* primaryCtrl, wxEvent& event) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGTextCtrlEditor::OnEvent(propgrid, property, primaryCtrl, event);
    }
    return _CommonCallback30(blocked, (PyObject*)m_clientData, funcobj, propgrid, property, primaryCtrl, event);
}


void PyTextCtrlEditor::OnFocus(wxPGProperty* property, wxWindow* wnd) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnFocus_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnFocus_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGTextCtrlEditor::OnFocus(property, wnd);
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, wnd);
}


wxPGVariantAndBool PyTextCtrlEditor::PyGetValueFromControl(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueFromControl_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueFromControl_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxPGTextCtrlEditor::GetValueFromControl(vab.m_value, property, ctrl);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback32(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


void PyTextCtrlEditor::SetControlAppearance(wxPropertyGrid* pg, wxPGProperty* property, wxWindow* ctrl, const wxPGCell& appearance, const wxPGCell& oldAppearance, bool unspecified) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlAppearance_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlAppearance_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGTextCtrlEditor::SetControlAppearance(pg, property, ctrl, appearance, oldAppearance, unspecified);
        return;
    }
    _CommonCallback33(blocked, (PyObject*)m_clientData, funcobj, pg, property, ctrl, appearance, oldAppearance, unspecified);
}


void PyTextCtrlEditor::SetControlIntValue(wxPGProperty* property, wxWindow* ctrl, int value) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlIntValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlIntValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGTextCtrlEditor::SetControlIntValue(property, ctrl, value);
        return;
    }
    _CommonCallback34(blocked, (PyObject*)m_clientData, funcobj, property, ctrl, value);
}


void PyTextCtrlEditor::SetControlStringValue(wxPGProperty* property, wxWindow* ctrl, const wxString& txt) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlStringValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlStringValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGTextCtrlEditor::SetControlStringValue(property, ctrl, txt);
        return;
    }
    _CommonCallback35(blocked, (PyObject*)m_clientData, funcobj, property, ctrl, txt);
}


void PyTextCtrlEditor::SetValueToUnspecified(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetValueToUnspecified_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetValueToUnspecified_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGTextCtrlEditor::SetValueToUnspecified(property, ctrl);
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


void PyTextCtrlEditor::UpdateControl(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_UpdateControl_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_UpdateControl_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGTextCtrlEditor::UpdateControl(property, ctrl);
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


class PySystemColourProperty : public wxSystemColourProperty {
public:
        PySystemColourProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                            const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                            const wxColourPropertyValue&
                                value = wxColourPropertyValue() );
    PySystemColourProperty( const wxString& label, const wxString& name,
        const wxChar* const* labels, const long* values, wxPGChoices* choicesCache,
        const wxColourPropertyValue& value );
    PySystemColourProperty( const wxString& label, const wxString& name,
        const wxChar* const* labels, const long* values, wxPGChoices* choicesCache,
        const wxColour& value );
    virtual ~PySystemColourProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxString ColourToString( const wxColour& col, int index ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxVariant DoTranslateVal( wxColourPropertyValue& v ) const;
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxColour GetColour( int index ) const;
    virtual int GetCustomColourIndex() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual int GetIndexForValue( int value ) const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect, wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* primary, wxEvent& event );
    virtual wxSize OnMeasureImage( int item ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PySystemColourProperty_pyClass = NULL;


PySystemColourProperty::PySystemColourProperty(const wxString& label, const wxString& name, const wxColourPropertyValue& value)
    : wxSystemColourProperty(label, name, value)
{
    Init();
}

PySystemColourProperty::PySystemColourProperty(const wxString& label, const wxString& name, const wxChar* const* labels, const long* values, wxPGChoices* choicesCache, const wxColourPropertyValue& value)
    : wxSystemColourProperty(label, name, labels, values, choicesCache, value)
{
    Init();
}

PySystemColourProperty::PySystemColourProperty(const wxString& label, const wxString& name, const wxChar* const* labels, const long* values, wxPGChoices* choicesCache, const wxColour& value)
    : wxSystemColourProperty(label, name, labels, values, choicesCache, value)
{
    Init();
}

PySystemColourProperty::~PySystemColourProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PySystemColourProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PySystemColourProperty_pyClass )
    {
        gs_PySystemColourProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PySystemColourProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PySystemColourProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PySystemColourProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxSystemColourProperty::ValidateValue(value, validationInfo);
}

bool PySystemColourProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxSystemColourProperty::StringToValue(variant, text, argFlags);
}

bool PySystemColourProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxSystemColourProperty::IntToValue(variant, number, argFlags);
}


wxVariant PySystemColourProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxString PySystemColourProperty::ColourToString(const wxColour& col, int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ColourToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ColourToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::ColourToString(col, index);
    }
    return _CommonCallback36(blocked, (PyObject*)m_clientData, funcobj, col, index);
}


wxVariant PySystemColourProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PySystemColourProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PySystemColourProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PySystemColourProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxVariant PySystemColourProperty::DoTranslateVal(wxColourPropertyValue& v) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoTranslateVal_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoTranslateVal_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::DoTranslateVal(v);
    }
    return _CommonCallback37(blocked, (PyObject*)m_clientData, funcobj, v);
}


wxPGCellRenderer* PySystemColourProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PySystemColourProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxColour PySystemColourProperty::GetColour(int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetColour_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetColour_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::GetColour(index);
    }
    return _CommonCallback38(blocked, (PyObject*)m_clientData, funcobj, index);
}


int PySystemColourProperty::GetCustomColourIndex() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCustomColourIndex_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCustomColourIndex_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::GetCustomColourIndex();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PySystemColourProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


int PySystemColourProperty::GetIndexForValue(int value) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetIndexForValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetIndexForValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::GetIndexForValue(value);
    }
    return _CommonCallback20(blocked, (PyObject*)m_clientData, funcobj, value);
}


wxString PySystemColourProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PySystemColourProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxSystemColourProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PySystemColourProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::OnEvent(propgrid, primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, primary, event);
}


wxSize PySystemColourProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PySystemColourProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxSystemColourProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PySystemColourProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxSystemColourProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PySystemColourProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PySystemColourProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxSystemColourProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PySystemColourProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxSystemColourProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PySystemColourProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxSystemColourProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PySystemColourProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxSystemColourProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PySystemColourProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxSystemColourProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyFlagsProperty : public wxFlagsProperty {
public:
        PyFlagsProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                     const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                     const wxArrayString& labels = wxArrayString(),
                     const wxArrayInt& values = wxArrayInt(),
                     int value = 0 );
    virtual ~PyFlagsProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* wnd_primary,
                          wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyFlagsProperty_pyClass = NULL;


PyFlagsProperty::PyFlagsProperty(const wxString& label, const wxString& name, const wxArrayString& labels, const wxArrayInt& values, int value)
    : wxFlagsProperty(label, name, labels, values, value)
{
    Init();
}

PyFlagsProperty::~PyFlagsProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyFlagsProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyFlagsProperty_pyClass )
    {
        gs_PyFlagsProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyFlagsProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyFlagsProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyFlagsProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxFlagsProperty::ValidateValue(value, validationInfo);
}

bool PyFlagsProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxFlagsProperty::StringToValue(variant, text, argFlags);
}

bool PyFlagsProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxFlagsProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyFlagsProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxVariant PyFlagsProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyFlagsProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyFlagsProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyFlagsProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxPGCellRenderer* PyFlagsProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyFlagsProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyFlagsProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyFlagsProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PyFlagsProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFlagsProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyFlagsProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* wnd_primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::OnEvent(propgrid, wnd_primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, wnd_primary, event);
}


wxSize PyFlagsProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyFlagsProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFlagsProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyFlagsProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFlagsProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyFlagsProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyFlagsProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxFlagsProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyFlagsProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxFlagsProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyFlagsProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxFlagsProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyFlagsProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFlagsProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyFlagsProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFlagsProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyFontProperty : public wxFontProperty {
public:
        PyFontProperty(const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                   const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                   const wxFont& value = wxFont());
    virtual ~PyFontProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* primary, wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyFontProperty_pyClass = NULL;


PyFontProperty::PyFontProperty(const wxString& label, const wxString& name, const wxFont& value)
    : wxFontProperty(label, name, value)
{
    Init();
}

PyFontProperty::~PyFontProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyFontProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyFontProperty_pyClass )
    {
        gs_PyFontProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyFontProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyFontProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyFontProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxFontProperty::ValidateValue(value, validationInfo);
}

bool PyFontProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxFontProperty::StringToValue(variant, text, argFlags);
}

bool PyFontProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxFontProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyFontProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxVariant PyFontProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyFontProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyFontProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyFontProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxPGCellRenderer* PyFontProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyFontProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyFontProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyFontProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PyFontProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFontProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyFontProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::OnEvent(propgrid, primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, primary, event);
}


wxSize PyFontProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyFontProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFontProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyFontProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFontProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyFontProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyFontProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxFontProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyFontProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxFontProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyFontProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxFontProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyFontProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFontProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyFontProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFontProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyColourProperty : public wxColourProperty {
public:
        PyColourProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                      const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                      const wxColour& value = *wxWHITE );
    virtual ~PyColourProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxString ColourToString( const wxColour& col, int index ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxVariant DoTranslateVal( wxColourPropertyValue& v ) const;
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxColour GetColour( int index ) const;
    virtual int GetCustomColourIndex() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual int GetIndexForValue( int value ) const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect, wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* primary, wxEvent& event );
    virtual wxSize OnMeasureImage( int item ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyColourProperty_pyClass = NULL;


PyColourProperty::PyColourProperty(const wxString& label, const wxString& name, const wxColour& value)
    : wxColourProperty(label, name, value)
{
    Init();
}

PyColourProperty::~PyColourProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyColourProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyColourProperty_pyClass )
    {
        gs_PyColourProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyColourProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyColourProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyColourProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxColourProperty::ValidateValue(value, validationInfo);
}

bool PyColourProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxColourProperty::StringToValue(variant, text, argFlags);
}

bool PyColourProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxColourProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyColourProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxString PyColourProperty::ColourToString(const wxColour& col, int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ColourToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ColourToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::ColourToString(col, index);
    }
    return _CommonCallback36(blocked, (PyObject*)m_clientData, funcobj, col, index);
}


wxVariant PyColourProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyColourProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyColourProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyColourProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxVariant PyColourProperty::DoTranslateVal(wxColourPropertyValue& v) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoTranslateVal_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoTranslateVal_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::DoTranslateVal(v);
    }
    return _CommonCallback37(blocked, (PyObject*)m_clientData, funcobj, v);
}


wxPGCellRenderer* PyColourProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyColourProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxColour PyColourProperty::GetColour(int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetColour_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetColour_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::GetColour(index);
    }
    return _CommonCallback38(blocked, (PyObject*)m_clientData, funcobj, index);
}


int PyColourProperty::GetCustomColourIndex() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCustomColourIndex_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCustomColourIndex_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::GetCustomColourIndex();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyColourProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


int PyColourProperty::GetIndexForValue(int value) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetIndexForValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetIndexForValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::GetIndexForValue(value);
    }
    return _CommonCallback20(blocked, (PyObject*)m_clientData, funcobj, value);
}


wxString PyColourProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PyColourProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxColourProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyColourProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::OnEvent(propgrid, primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, primary, event);
}


wxSize PyColourProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyColourProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxColourProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyColourProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxColourProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyColourProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyColourProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxColourProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyColourProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxColourProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyColourProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxColourProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyColourProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxColourProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyColourProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxColourProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyFileProperty : public wxFileProperty {
public:
        PyFileProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                    const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                    const wxString& value = wxEmptyString );
    virtual ~PyFileProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator() const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* wnd_primary,
                          wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyFileProperty_pyClass = NULL;


PyFileProperty::PyFileProperty(const wxString& label, const wxString& name, const wxString& value)
    : wxFileProperty(label, name, value)
{
    Init();
}

PyFileProperty::~PyFileProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyFileProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyFileProperty_pyClass )
    {
        gs_PyFileProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyFileProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyFileProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyFileProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxFileProperty::ValidateValue(value, validationInfo);
}

bool PyFileProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxFileProperty::StringToValue(variant, text, argFlags);
}

bool PyFileProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxFileProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyFileProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxVariant PyFileProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyFileProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyFileProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyFileProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxPGCellRenderer* PyFileProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyFileProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyFileProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyFileProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PyFileProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFileProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyFileProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* wnd_primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::OnEvent(propgrid, wnd_primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, wnd_primary, event);
}


wxSize PyFileProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyFileProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFileProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyFileProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFileProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyFileProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyFileProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxFileProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyFileProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxFileProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyFileProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxFileProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyFileProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxFileProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyFileProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxFileProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyIntProperty : public wxIntProperty {
public:
        PyIntProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                   const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                   long value = 0 );
    PyIntProperty( const wxString& label,
                   const wxString& name,
                   const wxLongLong& value );
    virtual ~PyIntProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator() const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* wnd_primary,
                          wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyIntProperty_pyClass = NULL;


PyIntProperty::PyIntProperty(const wxString& label, const wxString& name, long value)
    : wxIntProperty(label, name, value)
{
    Init();
}

PyIntProperty::PyIntProperty(const wxString& label, const wxString& name, const wxLongLong& value)
    : wxIntProperty(label, name, value)
{
    Init();
}

PyIntProperty::~PyIntProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyIntProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyIntProperty_pyClass )
    {
        gs_PyIntProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyIntProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyIntProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyIntProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxIntProperty::ValidateValue(value, validationInfo);
}

bool PyIntProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxIntProperty::StringToValue(variant, text, argFlags);
}

bool PyIntProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxIntProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyIntProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxVariant PyIntProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyIntProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyIntProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyIntProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxPGCellRenderer* PyIntProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyIntProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyIntProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyIntProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PyIntProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxIntProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyIntProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* wnd_primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::OnEvent(propgrid, wnd_primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, wnd_primary, event);
}


wxSize PyIntProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyIntProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxIntProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyIntProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxIntProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyIntProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyIntProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxIntProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyIntProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxIntProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyIntProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxIntProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyIntProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxIntProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyIntProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxIntProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyEditor : public wxPGEditor {
public:
        PyEditor();
    virtual ~PyEditor();
    void _SetSelf(PyObject *self);
    virtual bool GetValueFromControl(wxVariant& value, wxPGProperty* property, wxWindow* ctrl) const;
    virtual bool CanContainCustomImage() const;
    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
                                          wxPGProperty* property,
                                          const wxPoint& pos,
                                          const wxSize& size) const;
    virtual void DeleteItem( wxWindow* ctrl, int index ) const;
    virtual void DrawValue( wxDC& dc,
                            const wxRect& rect,
                            wxPGProperty* property,
                            const wxString& text ) const;
    virtual wxString GetName() const;
    virtual int InsertItem( wxWindow* ctrl,
                            const wxString& label,
                            int index ) const;
    virtual bool OnEvent( wxPropertyGrid* propgrid, wxPGProperty* property,
        wxWindow* wnd_primary, wxEvent& event ) const;
    virtual void OnFocus( wxPGProperty* property, wxWindow* wnd ) const;
    virtual wxPGVariantAndBool PyGetValueFromControl( wxPGProperty* property, wxWindow* ctrl ) const;
    virtual void SetControlAppearance( wxPropertyGrid* pg,
                                       wxPGProperty* property,
                                       wxWindow* ctrl,
                                       const wxPGCell& appearance,
                                       const wxPGCell& oldAppearance,
                                       bool unspecified ) const;
    virtual void SetControlIntValue( wxPGProperty* property,
                                     wxWindow* ctrl,
                                     int value ) const;
    virtual void SetControlStringValue( wxPGProperty* property,
                                        wxWindow* ctrl,
                                        const wxString& txt ) const;
    virtual void SetValueToUnspecified( wxPGProperty* property,
                                        wxWindow* ctrl ) const;
    virtual void UpdateControl( wxPGProperty* property,
                                wxWindow* ctrl ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyEditor_pyClass = NULL;


PyEditor::PyEditor()
    : wxPGEditor()
{
    Init();
}

PyEditor::~PyEditor()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyEditor::_SetSelf(PyObject *self)
{
    if ( !gs_PyEditor_pyClass )
    {
        gs_PyEditor_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyEditor_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

bool PyEditor::GetValueFromControl(wxVariant& value, wxPGProperty* property, wxWindow* ctrl) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyGetValueFromControl(property, ctrl);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxPGEditor::GetValueFromControl(value, property, ctrl);
}


bool PyEditor::CanContainCustomImage() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_CanContainCustomImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_CanContainCustomImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGEditor::CanContainCustomImage();
    }
    return _CommonCallback25(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGWindowList PyEditor::CreateControls(wxPropertyGrid* propgrid, wxPGProperty* property, const wxPoint& pos, const wxSize& size) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_CreateControls_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_CreateControls_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        PyErr_SetString(PyExc_TypeError,"this method must be implemented");
        return wxPGWindowList();
    }
    return _CommonCallback26(blocked, (PyObject*)m_clientData, funcobj, propgrid, property, pos, size);
}


void PyEditor::DeleteItem(wxWindow* ctrl, int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DeleteItem_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DeleteItem_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGEditor::DeleteItem(ctrl, index);
        return;
    }
    _CommonCallback27(blocked, (PyObject*)m_clientData, funcobj, ctrl, index);
}


void PyEditor::DrawValue(wxDC& dc, const wxRect& rect, wxPGProperty* property, const wxString& text) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DrawValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DrawValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGEditor::DrawValue(dc, rect, property, text);
        return;
    }
    _CommonCallback28(blocked, (PyObject*)m_clientData, funcobj, dc, rect, property, text);
}


wxString PyEditor::GetName() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetName_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetName_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGEditor::GetName();
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


int PyEditor::InsertItem(wxWindow* ctrl, const wxString& label, int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_InsertItem_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_InsertItem_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGEditor::InsertItem(ctrl, label, index);
    }
    return _CommonCallback29(blocked, (PyObject*)m_clientData, funcobj, ctrl, label, index);
}


bool PyEditor::OnEvent(wxPropertyGrid* propgrid, wxPGProperty* property, wxWindow* wnd_primary, wxEvent& event) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        PyErr_SetString(PyExc_TypeError,"this method must be implemented");
        return false;
    }
    return _CommonCallback30(blocked, (PyObject*)m_clientData, funcobj, propgrid, property, wnd_primary, event);
}


void PyEditor::OnFocus(wxPGProperty* property, wxWindow* wnd) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnFocus_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnFocus_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGEditor::OnFocus(property, wnd);
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, wnd);
}


wxPGVariantAndBool PyEditor::PyGetValueFromControl(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueFromControl_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueFromControl_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxPGEditor::GetValueFromControl(vab.m_value, property, ctrl);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback32(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


void PyEditor::SetControlAppearance(wxPropertyGrid* pg, wxPGProperty* property, wxWindow* ctrl, const wxPGCell& appearance, const wxPGCell& oldAppearance, bool unspecified) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlAppearance_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlAppearance_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGEditor::SetControlAppearance(pg, property, ctrl, appearance, oldAppearance, unspecified);
        return;
    }
    _CommonCallback33(blocked, (PyObject*)m_clientData, funcobj, pg, property, ctrl, appearance, oldAppearance, unspecified);
}


void PyEditor::SetControlIntValue(wxPGProperty* property, wxWindow* ctrl, int value) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlIntValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlIntValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGEditor::SetControlIntValue(property, ctrl, value);
        return;
    }
    _CommonCallback34(blocked, (PyObject*)m_clientData, funcobj, property, ctrl, value);
}


void PyEditor::SetControlStringValue(wxPGProperty* property, wxWindow* ctrl, const wxString& txt) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlStringValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlStringValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGEditor::SetControlStringValue(property, ctrl, txt);
        return;
    }
    _CommonCallback35(blocked, (PyObject*)m_clientData, funcobj, property, ctrl, txt);
}


void PyEditor::SetValueToUnspecified(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetValueToUnspecified_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetValueToUnspecified_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGEditor::SetValueToUnspecified(property, ctrl);
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


void PyEditor::UpdateControl(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_UpdateControl_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_UpdateControl_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        PyErr_SetString(PyExc_TypeError,"this method must be implemented");
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


class PyChoiceEditor : public wxPGChoiceEditor {
public:
        PyChoiceEditor();
    virtual ~PyChoiceEditor();
    void _SetSelf(PyObject *self);
    virtual bool GetValueFromControl(wxVariant& value, wxPGProperty* property, wxWindow* ctrl) const;
    virtual bool CanContainCustomImage() const;
    virtual wxPGWindowList CreateControls(wxPropertyGrid* propgrid,
                                          wxPGProperty* property,
                                          const wxPoint& pos,
                                          const wxSize& size) const;
    virtual void DeleteItem( wxWindow* ctrl, int index ) const;
    virtual void DrawValue( wxDC& dc,
                            const wxRect& rect,
                            wxPGProperty* property,
                            const wxString& text ) const;
    virtual wxString GetName() const;
    virtual int InsertItem( wxWindow* ctrl,
                            const wxString& label,
                            int index ) const;
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxPGProperty* property,
                          wxWindow* primaryCtrl,
                          wxEvent& event ) const;
    virtual void OnFocus( wxPGProperty* property, wxWindow* wnd ) const;
    virtual wxPGVariantAndBool PyGetValueFromControl( wxPGProperty* property, wxWindow* ctrl ) const;
    virtual void SetControlAppearance( wxPropertyGrid* pg,
                                       wxPGProperty* property,
                                       wxWindow* ctrl,
                                       const wxPGCell& appearance,
                                       const wxPGCell& oldAppearance,
                                       bool unspecified ) const;
    virtual void SetControlIntValue( wxPGProperty* property,
                                     wxWindow* ctrl,
                                     int value ) const;
    virtual void SetControlStringValue( wxPGProperty* property,
                                        wxWindow* ctrl,
                                        const wxString& txt ) const;
    virtual void SetValueToUnspecified( wxPGProperty* property,
                                        wxWindow* ctrl ) const;
    virtual void UpdateControl( wxPGProperty* property,
                                wxWindow* ctrl ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyChoiceEditor_pyClass = NULL;


PyChoiceEditor::PyChoiceEditor()
    : wxPGChoiceEditor()
{
    Init();
}

PyChoiceEditor::~PyChoiceEditor()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyChoiceEditor::_SetSelf(PyObject *self)
{
    if ( !gs_PyChoiceEditor_pyClass )
    {
        gs_PyChoiceEditor_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyChoiceEditor_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

bool PyChoiceEditor::GetValueFromControl(wxVariant& value, wxPGProperty* property, wxWindow* ctrl) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyGetValueFromControl(property, ctrl);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxPGChoiceEditor::GetValueFromControl(value, property, ctrl);
}


bool PyChoiceEditor::CanContainCustomImage() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_CanContainCustomImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_CanContainCustomImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGChoiceEditor::CanContainCustomImage();
    }
    return _CommonCallback25(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGWindowList PyChoiceEditor::CreateControls(wxPropertyGrid* propgrid, wxPGProperty* property, const wxPoint& pos, const wxSize& size) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_CreateControls_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_CreateControls_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGChoiceEditor::CreateControls(propgrid, property, pos, size);
    }
    return _CommonCallback26(blocked, (PyObject*)m_clientData, funcobj, propgrid, property, pos, size);
}


void PyChoiceEditor::DeleteItem(wxWindow* ctrl, int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DeleteItem_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DeleteItem_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGChoiceEditor::DeleteItem(ctrl, index);
        return;
    }
    _CommonCallback27(blocked, (PyObject*)m_clientData, funcobj, ctrl, index);
}


void PyChoiceEditor::DrawValue(wxDC& dc, const wxRect& rect, wxPGProperty* property, const wxString& text) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DrawValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DrawValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGChoiceEditor::DrawValue(dc, rect, property, text);
        return;
    }
    _CommonCallback28(blocked, (PyObject*)m_clientData, funcobj, dc, rect, property, text);
}


wxString PyChoiceEditor::GetName() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetName_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetName_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGChoiceEditor::GetName();
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


int PyChoiceEditor::InsertItem(wxWindow* ctrl, const wxString& label, int index) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_InsertItem_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_InsertItem_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGChoiceEditor::InsertItem(ctrl, label, index);
    }
    return _CommonCallback29(blocked, (PyObject*)m_clientData, funcobj, ctrl, label, index);
}


bool PyChoiceEditor::OnEvent(wxPropertyGrid* propgrid, wxPGProperty* property, wxWindow* primaryCtrl, wxEvent& event) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGChoiceEditor::OnEvent(propgrid, property, primaryCtrl, event);
    }
    return _CommonCallback30(blocked, (PyObject*)m_clientData, funcobj, propgrid, property, primaryCtrl, event);
}


void PyChoiceEditor::OnFocus(wxPGProperty* property, wxWindow* wnd) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnFocus_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnFocus_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGChoiceEditor::OnFocus(property, wnd);
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, wnd);
}


wxPGVariantAndBool PyChoiceEditor::PyGetValueFromControl(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueFromControl_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueFromControl_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxPGChoiceEditor::GetValueFromControl(vab.m_value, property, ctrl);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback32(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


void PyChoiceEditor::SetControlAppearance(wxPropertyGrid* pg, wxPGProperty* property, wxWindow* ctrl, const wxPGCell& appearance, const wxPGCell& oldAppearance, bool unspecified) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlAppearance_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlAppearance_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGChoiceEditor::SetControlAppearance(pg, property, ctrl, appearance, oldAppearance, unspecified);
        return;
    }
    _CommonCallback33(blocked, (PyObject*)m_clientData, funcobj, pg, property, ctrl, appearance, oldAppearance, unspecified);
}


void PyChoiceEditor::SetControlIntValue(wxPGProperty* property, wxWindow* ctrl, int value) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlIntValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlIntValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGChoiceEditor::SetControlIntValue(property, ctrl, value);
        return;
    }
    _CommonCallback34(blocked, (PyObject*)m_clientData, funcobj, property, ctrl, value);
}


void PyChoiceEditor::SetControlStringValue(wxPGProperty* property, wxWindow* ctrl, const wxString& txt) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetControlStringValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetControlStringValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGChoiceEditor::SetControlStringValue(property, ctrl, txt);
        return;
    }
    _CommonCallback35(blocked, (PyObject*)m_clientData, funcobj, property, ctrl, txt);
}


void PyChoiceEditor::SetValueToUnspecified(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_SetValueToUnspecified_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_SetValueToUnspecified_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGChoiceEditor::SetValueToUnspecified(property, ctrl);
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


void PyChoiceEditor::UpdateControl(wxPGProperty* property, wxWindow* ctrl) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_UpdateControl_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_UpdateControl_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGChoiceEditor::UpdateControl(property, ctrl);
        return;
    }
    _CommonCallback31(blocked, (PyObject*)m_clientData, funcobj, property, ctrl);
}


class PyProperty : public wxPGProperty {
public:
        PyProperty();
    PyProperty( const wxString& label, const wxString& name );
    virtual ~PyProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* wnd_primary,
                          wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyProperty_pyClass = NULL;


PyProperty::PyProperty()
    : wxPGProperty()
{
    Init();
}

PyProperty::PyProperty(const wxString& label, const wxString& name)
    : wxPGProperty(label, name)
{
    Init();
}

PyProperty::~PyProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyProperty_pyClass )
    {
        gs_PyProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxPGProperty::ValidateValue(value, validationInfo);
}

bool PyProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxPGProperty::StringToValue(variant, text, argFlags);
}

bool PyProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxPGProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxVariant PyProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxPGCellRenderer* PyProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PyProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* wnd_primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::OnEvent(propgrid, wnd_primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, wnd_primary, event);
}


wxSize PyProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxPGProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxPGProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxPGProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxPGProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxPGProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyUIntProperty : public wxUIntProperty {
public:
        PyUIntProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                    const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                     long value = 0 );
    PyUIntProperty( const wxString& label,
                    const wxString& name,
                    const wxULongLong& value );
    virtual ~PyUIntProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* wnd_primary,
                          wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyUIntProperty_pyClass = NULL;


PyUIntProperty::PyUIntProperty(const wxString& label, const wxString& name, long value)
    : wxUIntProperty(label, name, value)
{
    Init();
}

PyUIntProperty::PyUIntProperty(const wxString& label, const wxString& name, const wxULongLong& value)
    : wxUIntProperty(label, name, value)
{
    Init();
}

PyUIntProperty::~PyUIntProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyUIntProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyUIntProperty_pyClass )
    {
        gs_PyUIntProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyUIntProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyUIntProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyUIntProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxUIntProperty::ValidateValue(value, validationInfo);
}

bool PyUIntProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxUIntProperty::StringToValue(variant, text, argFlags);
}

bool PyUIntProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxUIntProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyUIntProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxVariant PyUIntProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyUIntProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyUIntProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyUIntProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxPGCellRenderer* PyUIntProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyUIntProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyUIntProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyUIntProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


void PyUIntProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxUIntProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyUIntProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* wnd_primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::OnEvent(propgrid, wnd_primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, wnd_primary, event);
}


wxSize PyUIntProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyUIntProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxUIntProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyUIntProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxUIntProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyUIntProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyUIntProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxUIntProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyUIntProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxUIntProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyUIntProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxUIntProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyUIntProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxUIntProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyUIntProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxUIntProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


class PyLongStringProperty : public wxLongStringProperty {
public:
        PyLongStringProperty( const wxString& label = (*wxPGProperty::sm_wxPG_LABEL),
                          const wxString& name = (*wxPGProperty::sm_wxPG_LABEL),
                          const wxString& value = wxEmptyString );
    virtual ~PyLongStringProperty();
    void _SetSelf(PyObject *self);
    virtual const wxPGEditor* DoGetEditorClass() const;
    virtual bool ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const;
    virtual bool StringToValue(wxVariant& variant, const wxString& text, int argFlags) const;
    virtual bool IntToValue(wxVariant& variant, int number, int argFlags) const;
    virtual wxVariant ChildChanged( wxVariant& thisValue,
                                    int childIndex,
                                    wxVariant& childValue ) const;
    virtual wxVariant DoGetAttribute( const wxString& name ) const;
    virtual wxValidator* DoGetValidator () const;
    virtual wxVariant DoGetValue() const;
    virtual bool DoSetAttribute( const wxString& name, wxVariant& value );
    virtual wxPGCellRenderer* GetCellRenderer( int column ) const;
    virtual int GetChoiceSelection() const;
    virtual wxPGEditorDialogAdapter* GetEditorDialog() const;
    virtual wxString GetValueAsString( int argFlags = 0 ) const;
    virtual bool OnButtonClick( wxPropertyGrid* propgrid, wxString& value );
    virtual void OnCustomPaint( wxDC& dc,
                                const wxRect& rect,
                                wxPGPaintData& paintdata );
    virtual bool OnEvent( wxPropertyGrid* propgrid,
                          wxWindow* primary, wxEvent& event );
    virtual wxSize OnMeasureImage( int item = -1 ) const;
    virtual void OnSetValue();
    virtual void OnValidationFailure( wxVariant& pendingValue );
    virtual wxString PyGetEditor() const;
    virtual wxPGVariantAndBool PyIntToValue( int number, int argFlags ) const;
    virtual wxPGVariantAndBool PyStringToValue( const wxString& text, int argFlags ) const;
    virtual wxPGVariantAndBool PyValidateValue( const wxVariant& value, wxPGValidationInfo& validationInfo ) const;
    virtual void RefreshChildren();
    virtual wxString ValueToString( wxVariant& value, int argFlags = 0 ) const;
private:
    void Init() { if ( !gs_funcNamesInitialized ) _InitFuncNames(); }
};

static PyObject* gs_PyLongStringProperty_pyClass = NULL;


PyLongStringProperty::PyLongStringProperty(const wxString& label, const wxString& name, const wxString& value)
    : wxLongStringProperty(label, name, value)
{
    Init();
}

PyLongStringProperty::~PyLongStringProperty()
{
    if (m_clientData) { _deleteOwningObject(m_clientData); m_clientData = NULL; }
}

void PyLongStringProperty::_SetSelf(PyObject *self)
{
    if ( !gs_PyLongStringProperty_pyClass )
    {
        gs_PyLongStringProperty_pyClass = PyObject_GetAttr(self, gs___class___Name);
        Py_DECREF(gs_PyLongStringProperty_pyClass);
    }
    if ( !m_clientData ) {
        m_clientData = self;
        Py_INCREF(self);
    }
}

const wxPGEditor* PyLongStringProperty::DoGetEditorClass() const
{
    return wxPropertyGridInterface::GetEditorByName(PyGetEditor());
}

bool PyLongStringProperty::ValidateValue(wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyValidateValue(value, validationInfo);
        if ( vab.m_valueValid )
            value = vab.m_value;
        return vab.m_result;
    }
    return wxLongStringProperty::ValidateValue(value, validationInfo);
}

bool PyLongStringProperty::StringToValue(wxVariant& variant, const wxString& text, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyStringToValue(text, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxLongStringProperty::StringToValue(variant, text, argFlags);
}

bool PyLongStringProperty::IntToValue(wxVariant& variant, int number, int argFlags) const
{
    if ( m_clientData )
    {
        wxPGVariantAndBool vab = PyIntToValue(number, argFlags);
        if ( vab.m_valueValid )
            variant = vab.m_value;
        return vab.m_result;
    }
    return wxLongStringProperty::IntToValue(variant, number, argFlags);
}


wxVariant PyLongStringProperty::ChildChanged(wxVariant& thisValue, int childIndex, wxVariant& childValue) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ChildChanged_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ChildChanged_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::ChildChanged(thisValue, childIndex, childValue);
    }
    return _CommonCallback0(blocked, (PyObject*)m_clientData, funcobj, thisValue, childIndex, childValue);
}


wxVariant PyLongStringProperty::DoGetAttribute(const wxString& name) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::DoGetAttribute(name);
    }
    return _CommonCallback1(blocked, (PyObject*)m_clientData, funcobj, name);
}


wxValidator* PyLongStringProperty::DoGetValidator() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValidator_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValidator_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::DoGetValidator();
    }
    return _CommonCallback2(blocked, (PyObject*)m_clientData, funcobj);
}


wxVariant PyLongStringProperty::DoGetValue() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoGetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoGetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::DoGetValue();
    }
    return _CommonCallback3(blocked, (PyObject*)m_clientData, funcobj);
}


bool PyLongStringProperty::DoSetAttribute(const wxString& name, wxVariant& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_DoSetAttribute_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_DoSetAttribute_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::DoSetAttribute(name, value);
    }
    return _CommonCallback4(blocked, (PyObject*)m_clientData, funcobj, name, value);
}


wxPGCellRenderer* PyLongStringProperty::GetCellRenderer(int column) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetCellRenderer_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetCellRenderer_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::GetCellRenderer(column);
    }
    return _CommonCallback5(blocked, (PyObject*)m_clientData, funcobj, column);
}


int PyLongStringProperty::GetChoiceSelection() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetChoiceSelection_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetChoiceSelection_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::GetChoiceSelection();
    }
    return _CommonCallback6(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGEditorDialogAdapter* PyLongStringProperty::GetEditorDialog() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditorDialog_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditorDialog_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::GetEditorDialog();
    }
    return _CommonCallback7(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyLongStringProperty::GetValueAsString(int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetValueAsString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetValueAsString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::GetValueAsString(argFlags);
    }
    return _CommonCallback8(blocked, (PyObject*)m_clientData, funcobj, argFlags);
}


bool PyLongStringProperty::OnButtonClick(wxPropertyGrid* propgrid, wxString& value)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnButtonClick_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnButtonClick_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::OnButtonClick(propgrid, value);
    }
    PyObject* res;
    PyObject* py_propgrid;
    py_propgrid = SWIG_NewPointerObj((void*)propgrid, SWIGTYPE_p_wxPropertyGrid, 0);
    PyObject* py_value;
    #if wxUSE_UNICODE
        py_value = PyUnicode_FromWideChar((&value)->c_str(), (&value)->Len());
    #else
        py_value = PyString_FromStringAndSize((&value)->c_str(), (&value)->Len());
    #endif

    res = PyObject_CallFunctionObjArgs(funcobj, ((PyObject*)m_clientData), py_propgrid, py_value, NULL);
    Py_DECREF(funcobj);
    Py_DECREF(py_value);
    Py_DECREF(py_propgrid);
    if (PyErr_Occurred()) SWIG_fail;
    {
    bool retval;
        if ( !SWIG_IsOK(SWIG_AsVal_bool(res, &retval)) ) {
        PyErr_SetString(PyExc_TypeError,"expected bool");
        SWIG_fail;
    }
    Py_DECREF(res);
    wxPyEndBlockThreads(blocked);
    return retval;
    }
  fail:
    if ( PyErr_Occurred() ) PyErr_Print();
    wxPyEndBlockThreads(blocked);
    return false;
}


void PyLongStringProperty::OnCustomPaint(wxDC& dc, const wxRect& rect, wxPGPaintData& paintdata)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnCustomPaint_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnCustomPaint_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxLongStringProperty::OnCustomPaint(dc, rect, paintdata);
        return;
    }
    _CommonCallback9(blocked, (PyObject*)m_clientData, funcobj, dc, rect, paintdata);
}


bool PyLongStringProperty::OnEvent(wxPropertyGrid* propgrid, wxWindow* primary, wxEvent& event)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnEvent_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnEvent_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::OnEvent(propgrid, primary, event);
    }
    return _CommonCallback10(blocked, (PyObject*)m_clientData, funcobj, propgrid, primary, event);
}


wxSize PyLongStringProperty::OnMeasureImage(int item) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnMeasureImage_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnMeasureImage_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::OnMeasureImage(item);
    }
    return _CommonCallback11(blocked, (PyObject*)m_clientData, funcobj, item);
}


void PyLongStringProperty::OnSetValue()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnSetValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnSetValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxLongStringProperty::OnSetValue();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


void PyLongStringProperty::OnValidationFailure(wxVariant& pendingValue)
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_OnValidationFailure_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_OnValidationFailure_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxLongStringProperty::OnValidationFailure(pendingValue);
        return;
    }
    _CommonCallback13(blocked, (PyObject*)m_clientData, funcobj, pendingValue);
}


wxString PyLongStringProperty::PyGetEditor() const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_GetEditor_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_GetEditor_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            return wxT("TextCtrl");
        }
    }
    return _CommonCallback14(blocked, (PyObject*)m_clientData, funcobj);
}


wxPGVariantAndBool PyLongStringProperty::PyIntToValue(int number, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_IntToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_IntToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxLongStringProperty::IntToValue(vab.m_value, number, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback15(blocked, (PyObject*)m_clientData, funcobj, number, argFlags);
}


wxPGVariantAndBool PyLongStringProperty::PyStringToValue(const wxString& text, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_StringToValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_StringToValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_result = wxLongStringProperty::StringToValue(vab.m_value, text, argFlags);
            if ( vab.m_result )
                vab.m_valueValid = true;
            return vab;
        }
    }
    return _CommonCallback16(blocked, (PyObject*)m_clientData, funcobj, text, argFlags);
}


wxPGVariantAndBool PyLongStringProperty::PyValidateValue(const wxVariant& value, wxPGValidationInfo& validationInfo) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValidateValue_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValidateValue_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        {
            wxPGVariantAndBool vab;
            vab.m_value = value;
            vab.m_valueValid = true;
            vab.m_result = wxLongStringProperty::ValidateValue(vab.m_value, validationInfo);
            return vab;
        }
    }
    return _CommonCallback17(blocked, (PyObject*)m_clientData, funcobj, value, validationInfo);
}


void PyLongStringProperty::RefreshChildren()
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_RefreshChildren_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_RefreshChildren_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        wxLongStringProperty::RefreshChildren();
        return;
    }
    _CommonCallback12(blocked, (PyObject*)m_clientData, funcobj);
}


wxString PyLongStringProperty::ValueToString(wxVariant& value, int argFlags) const
{
    wxPyBlock_t blocked = wxPyBeginBlockThreads();

    PyObject* cls_ = PyObject_GetAttr((PyObject*)m_clientData, gs___class___Name);
    PyObject* funcobj = NULL;
    if ( PyObject_HasAttr(cls_, gs_ValueToString_Name) == 1 ) funcobj = PyObject_GetAttr(cls_, gs_ValueToString_Name);
    Py_DECREF(cls_);
    if ( !funcobj || PyObject_HasAttr((PyObject*)m_clientData, gs__super_call_Name) == 1 )
    {
        wxPyEndBlockThreads(blocked);
        return wxLongStringProperty::ValueToString(value, argFlags);
    }
    return _CommonCallback18(blocked, (PyObject*)m_clientData, funcobj, value, argFlags);
}


%}
