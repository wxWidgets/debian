#!/usr/bin/make -f
# debian/rules file to build packages from wx source
#
# Sculpted 13/2/2000 by Ron Lee <ron@debian.org> from new and
# variously stolen code :-)
# It makes copious use of the debhelper utilities written by
# Joey Hess and others.

SHELL = /bin/bash

#export DH_VERBOSE=1

include /usr/share/python/python.mk
include /usr/share/quilt/quilt.make
export DH_OPTIONS

# WXPYTHON_VERSION = $(shell dpkg-parsechangelog | sed -ne '/^Version: /s@Version: \(.*\)@\1@p')

DEB_HOST_MULTIARCH ?= $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)

ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))

    # The standard way to specify the number of jobs.
    JOB_COUNT := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))

else ifdef CONCURRENCY_LEVEL

  # A user who knows what they want, that's like gold...
  # respect their precious opinion of how much blue smoke to use.
  JOB_COUNT := $(CONCURRENCY_LEVEL)

else ifdef DISTCC_HOSTS

 # Otherwise, if they have a cluster, try to put it to good use.
  JOB_COUNT := $(shell set $${DISTCC_HOSTS} > /dev/null 2>&1 ; echo $$\#)

 # Not much faster, but it might keep you warm in winter...
 #JOB_COUNT := $(shell set $${DISTCC_HOSTS} > /dev/null 2>&1 ; echo $$(($$\# + $$\#)))

endif

ifdef JOB_COUNT
  FAST_MAKE = $(MAKE) -j $(JOB_COUNT)
else
  FAST_MAKE = $(MAKE)
endif

PYVERS := $(shell pyversions -vr)

# If another source package is to supply the common binary packages
# for a particular Debian release, then define this variable to indicate
# the $(release) that is expected to provide it.  Do not define it at
# all if this is to be the default (or only) wx source package for the
# target release.

DEBIAN_WX_DEFAULT_VERSION = 2.8


# This will extract a flavour out of the changelog and flavour the
# packages and binaries with it.  'Official' builds should use a
# changelog entry with a source package of the form wxwidgets$RELEASE.
# Flavoured builds may use wxwidgets$RELEASE-$FLAVOUR, where any
# descriptive alphanumeric name will do for FLAVOUR.  This will allow
# a custom build to be installed alongside the mainline ones without
# conflict.
DEBIAN_WXFLAVOUR := $(shell dpkg-parsechangelog | sed -ne '/^Source: /s@.*wxwidgets[0-9.]\+-\?\(.*\)@\1@p')


wx_major_version_number := $(shell sed -n 's/^wx_major_version_number=//p' configure.in)
wx_minor_version_number := $(shell sed -n 's/^wx_minor_version_number=//p' configure.in)
wx_release_number       := $(shell sed -n 's/^wx_release_number=//p' configure.in)
wx_subrelease_number    := $(shell sed -n 's/^wx_subrelease_number=//p' configure.in)

release := $(wx_major_version_number).$(wx_minor_version_number)
# Override temporarily.
release := 3.0

so_cur := $(shell sed 's,<set var="WX_CURRENT">\([0-9]\+\)</set>,\1,p;d' build/bakefiles/version.bkl)
so_age := $(shell sed 's,<set var="WX_AGE">\([0-9]\+\)</set>,\1,p;d' build/bakefiles/version.bkl)
soversion := $(shell expr $(so_cur) - $(so_age))

sorelease := $(release:%-$(DEBIAN_WXFLAVOUR)=%)-$(soversion)$(addprefix -,$(DEBIAN_WXFLAVOUR))

# In some places we use the full version number, including the micro version,
# for the development releases (which can be incompatible for the same major
# and minor version) but just the major.minor for the stable releases (which
# are supposed to be compatible), this variable contains the appropriate value
ifeq ($(shell expr '$(wx_minor_version_number)' : '.*[02468]$$'),0)
    # Odd minor version, so development release.
    compatible_release := $(release).$(wx_release_number)
else
    compatible_release := $(release)
endif

# Base value for alternative priorities.
alt_prio  := $(subst .,,$(release))

pytoolkit := gtk2
wxsubdir  := wx-$(compatible_release)-$(pytoolkit)-unicode

cross_host  := i586-mingw32msvc
cross_build := $(shell /usr/share/misc/config.guess)

config_cache       = ../config_deb.cache
config_cache_cross = ../config_deb_cross.cache


# build options
COMMON_CONFIGURE_OPTIONS = \
    --prefix=/usr \
    --cache-file=$(config_cache) \
    --with-flavour=$(DEBIAN_WXFLAVOUR) \
    --with-zlib=sys \
    --with-expat=sys

ifneq (,$(filter noopt,$(DEB_BUILD_OPTIONS)))
COMMON_CONFIGURE_OPTIONS += --disable-optimise
endif

BASE_CONFIGURE_OPTIONS = $(COMMON_CONFIGURE_OPTIONS) \
    --disable-gui \
	--libdir=\$${exec_prefix}/lib/$(DEB_HOST_MULTIARCH)

GTK_CONFIGURE_OPTIONS = $(COMMON_CONFIGURE_OPTIONS) \
    --with-gtk \
    --with-opengl \
    --enable-sound \
    --with-sdl \
    --enable-display \
    --enable-geometry \
    --enable-graphics_ctx \
    --with-libjpeg=sys \
    --with-libpng=sys \
    --with-libtiff=sys \
	--libdir=\$${exec_prefix}/lib/$(DEB_HOST_MULTIARCH)
#   --enable-mediactrl \

MSW_CONFIGURE_OPTIONS = \
    --with-msw \
    --with-opengl \
    --enable-display

# For the MSW packages, enabling threads in wx means that your application will
# have a dependency on mingwm10.dll.  If you don't use threads, this is just an
# annoyance, so default to disabling them.  If you want a wx package to use in
# a threaded application then comment out the next line.
MSW_CONFIGURE_OPTIONS += --disable-threads

PY_WX_CONFIG_OPTIONS = --version=$(release) --toolkit=$(pytoolkit) --static=no

# Packages to build:
package_wxbase_lib      := libwxbase$(sorelease)
package_wxbase_dev      := libwxbase$(release)-dev
package_wxbase_dbg      := libwxbase$(release)-dbg

package_gtk_lib         := libwxgtk$(sorelease)
package_gtk_dev         := libwxgtk$(release)-dev
package_gtk_dbg         := libwxgtk$(release)-dbg




package_gtk_py_lib      := python-wxgtk$(release)
package_gtk_py_ver       = python-wxversion
package_gtk_py_tools     = python-wxtools

package_headers         := wx$(release)-headers
package_i18n            := wx$(release)-i18n
package_doc             := wx$(release)-doc
package_examples        := wx$(release)-examples
package_common           = wx-common

# The packages listed here are common to all wx versions, and may be provided
# by another source package if more than one is in the release simultaneously.
common_packages	:= $(package_common) $(package_gtk_py_ver) $(package_gtk_py_tools)


package_gtk_dbg_py      := python-wxgtk$(release)-dbg



package_msw_dev         := libwxmsw$(release)-dev
package_msw_dbg         := libwxmsw$(release)-dbg
package_headers_msw     := wx$(release)-headers-msw

# The packages listed here will not be built by default.
extra_packages := \
		  $(package_msw_dev) $(package_msw_dbg) $(package_headers_msw)

ifdef DEBIAN_WX_DEFAULT_VERSION

  extra_packages += $(common_packages)

endif


# Build directories:
objdir_wxbase_shared       = objs_wxbase_sh
objdir_wxbase_debug        = objs_wxbase_d
objdir_gtk_shared          = objs_gtk_sh
objdir_gtk_debug           = objs_gtk_d
objdir_gtk_install         = objs_gtk_install
objdir_doc_cruft           = objs_doc_con
objdir_doc                 = docs/wx-manual.html
objdir_examples            = docs/examples
objdir_i18n                = locale

objdir_msw_shared          = objs_msw_sh
objdir_msw_static          = objs_msw_st
objdir_msw_dbg             = objs_msw_d
objdir_msw_install         = objs_msw_install

objdirs := $(objdir_wxbase_shared) $(objdir_wxbase_debug)                  \
	   $(objdir_gtk_shared) $(objdir_gtk_debug) $(objdir_gtk_install)  \
	   $(objdir_doc_cruft) $(objdir_doc) $(objdir_examples)            \
	   $(objdir_msw_shared) $(objdir_msw_static) $(objdir_msw_dbg)     \
	   $(objdir_msw_install)

#	note that the i18n package is actually arch indep (once built)
#	but must be built (and installed) during the arch any phase as
#	it's pulled out of the wxGTK shared lib package.
#
#       similarly some of the wxpython packages are arch indep too, but
#       all files for it are installed during the arch any phase.


# Build stamps:
build_arch_stamps = build-wxbase-shared-stamp build-wxbase-debug-stamp    \
                    build-gtk-shared-stamp build-gtk-shared-contrib-stamp \
                    build-gtk-debug-stamp build-gtk-debug-contrib-stamp   \
                    build-i18n-stamp build-gtk-py-stamp build-gtk-dbg-py-stamp

build_indep_stamps = build-examples-stamp build-doc-stamp

build_cross_stamps = build-msw-shared-stamp build-msw-static-stamp build-msw-dbg-stamp

build_stamps_native := $(build_arch_stamps) $(build_indep_stamps)

build_stamps := $(build_stamps_native) $(build_cross_stamps)


# Install targets:
install_all_arch = install-wxbase-lib install-wxbase-dev install-wxbase-dbg  \
                   install-gtk-lib install-gtk-dev install-gtk-dbg        \
                   install-headers install-i18n            \
                   install-gtk-py install-gtk-dbg-py

ifndef DEBIAN_WX_DEFAULT_VERSION

  install_all_arch += install-common

endif

install_all_indep = install-examples install-doc

install_all_cross = install-msw-dev install-msw-dbg install-headers-msw

install_all_native := $(install_all_arch) $(install_all_indep)

install_all := $(install_all_native) $(install_all_cross)


# wxPython uses this to build in-tree
wxconfig     := $(shell pwd)/$(objdir_gtk_shared)/wx-config --no_rpath
wxconfig-dbg := $(shell pwd)/$(objdir_gtk_debug)/wx-config --no_rpath

# and this after it is installed.
py_wxconfig  := wx-config $(PY_WX_CONFIG_OPTIONS) --debug=no
pyd_wxconfig := wx-config $(PY_WX_CONFIG_OPTIONS) --debug


#contrib_libs := $(subst CVS,,$(notdir $(wildcard contrib/include/wx/*)))


# The Rules:

config.guess config.sub:
	ln -sf /usr/share/misc/config.guess /usr/share/misc/config.sub .

debian/control: debian/control.in
	sed -e 's/=V/$(release)/g;s/=SOV/$(sorelease)/g'\
		< debian/control.in > debian/control

control-files-stamp: debian/control
	dh_testdir
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_wxbase_dev).$$f";    \
		sed -e  's/=V/$(release)/g;s/=PRIO/$(alt_prio)/g;s/=MA/$(DEB_HOST_MULTIARCH)/g' \
			< debian/libwxbase-dev.$$f                           \
			> debian/$(package_wxbase_dev).$$f;                  \
	done
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_wxbase_dbg).$$f";    \
		sed -e  's/=V/$(release)/g;s/=PRIO/$(alt_prio)/g;s/=MA/$(DEB_HOST_MULTIARCH)/g' \
			< debian/libwxbase-dbg.$$f                           \
			> debian/$(package_wxbase_dbg).$$f;                  \
	done
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_gtk_dev).$$f";       \
		sed -e  's/=V/$(release)/g;s/=PRIO/$(alt_prio)/g;s/=MA/$(DEB_HOST_MULTIARCH)/g' \
			< debian/libwxgtk-dev.$$f                            \
			> debian/$(package_gtk_dev).$$f;                     \
	done
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_gtk_dbg).$$f";       \
		sed -e  's/=V/$(release)/g;s/=PRIO/$(alt_prio)/g;s/=MA/$(DEB_HOST_MULTIARCH)/g' \
			< debian/libwxgtk-dbg.$$f                            \
			> debian/$(package_gtk_dbg).$$f;                     \
	done
	@for f in docs postinst prerm; do                                    \
		echo "generating control file $(package_gtk_py_lib).$$f";    \
		sed -e  's/=V/$(release)/g;s/=PRIO/$(alt_prio)/g'            \
			< debian/python-wxgtk.$$f                            \
			> debian/$(package_gtk_py_lib).$$f;                  \
	done
	@echo "generating control file $(package_gtk_dbg_py).docs"
	@cp debian/python-wxgtk.docs debian/$(package_gtk_dbg_py).docs
	@for f in docs doc-base; do                                          \
		echo "generating control file $(package_doc).$$f";           \
		sed -e 's/=V/$(release)/g' < debian/wx-doc.$$f               \
			> debian/$(package_doc).$$f;                         \
	done
	@for f in examples; do                                               \
		echo "generating control file $(package_examples).$$f";      \
		cp debian/wx-examples.$$f debian/$(package_examples).$$f;    \
	done
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_msw_dev).$$f";       \
		sed -e  's/=V/$(release)/g;s/=PRIO/$(alt_prio)/g'            \
		    -e	's/=H/$(cross_host)/g;'                              \
			< debian/libwxmsw-dev.$$f                            \
			> debian/$(package_msw_dev).$$f;                     \
	done
	@for f in postinst prerm; do                                         \
		echo "generating control file $(package_msw_dbg).$$f";       \
		sed -e  's/=V/$(release)/g;s/=PRIO/$(alt_prio)/g'            \
		    -e	's/=H/$(cross_host)/g;'                              \
			< debian/libwxmsw-dbg.$$f                            \
			> debian/$(package_msw_dbg).$$f;                     \
	done
#	@echo "generating control file $(package_common).menu";              \
#		sed -e 's/=V/$(release)/g' < debian/wx-common.menu           \
#			> debian/$(package_common).menu
	@echo "generating control file lintian-override";                    \
		sed -e  's/=V/$(release)/g;s/=SOV/$(sorelease)/g'            \
			< debian/lintian-override.in                         \
			> debian/lintian-override;                           \
	touch $@

build-arch: control-files-stamp $(build_arch_stamps)
build-indep: control-files-stamp $(build_indep_stamps)
build_all: control-files-stamp $(build_stamps_native)

# Really we should probably do nothing here until we know which
# binary target is being called, but alpha builds were exploding
# (compiler segfaults) in random places when building under fakeroot
# from the binary-arch target.  Build all -arch files here then, and
# let the -indep stuff fend for itself later.

build: build-stamp build-arch
build-stamp: $(QUILT_STAMPFN)


# The wx2.6 build system makes us run around in circles to get a separate
# libwxbase.  We need to configure it here in order to get the correct
# config files to use it alone, but there is no point building it as the
# wxgtk build is going to do that again anyway.  We'll move the relevant
# files out when that is done.

configure-wxbase-shared-stamp: config.guess
	dh_testdir
	mkdir -p $(objdir_wxbase_shared)
	cd $(objdir_wxbase_shared) \
	    && ../configure $(BASE_CONFIGURE_OPTIONS)
	touch $@

build-wxbase-shared-stamp: configure-wxbase-shared-stamp
	dh_testdir
	# Nothing to build here, move along...
	#$(FAST_MAKE) -C $(objdir_wxbase_shared)
	touch $@

configure-wxbase-debug-stamp: config.guess
	dh_testdir
	mkdir -p $(objdir_wxbase_debug)
	cd $(objdir_wxbase_debug)					\
	    && ../configure $(BASE_CONFIGURE_OPTIONS) --enable-debug
	touch $@

build-wxbase-debug-stamp: configure-wxbase-debug-stamp
	dh_testdir
	# Nothing to build here, move along...
	#$(FAST_MAKE) -C $(objdir_wxbase_debug)
	touch $@

configure-gtk-shared-stamp: config.guess
	dh_testdir
	mkdir -p $(objdir_gtk_shared)
	cd $(objdir_gtk_shared) \
	    && ../configure $(GTK_CONFIGURE_OPTIONS)
	touch $@

build-gtk-shared-stamp: configure-gtk-shared-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_gtk_shared)
	cd $(objdir_gtk_shared)/lib && ln -s . $(DEB_HOST_MULTIARCH)
	touch $@


configure-gtk-debug-stamp: config.guess
	dh_testdir
	mkdir -p $(objdir_gtk_debug)
	cd $(objdir_gtk_debug) \
	    && ../configure $(GTK_CONFIGURE_OPTIONS) --enable-debug
	touch $@

build-gtk-debug-stamp: configure-gtk-debug-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_gtk_debug)
	cd $(objdir_gtk_debug)/lib && ln -s . $(DEB_HOST_MULTIARCH)
	touch $@


build-gtk-shared-contrib-stamp: build-gtk-shared-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_gtk_shared)/contrib/src
	$(FAST_MAKE) -C $(objdir_gtk_shared)/utils/wxrc
	touch $@


build-gtk-debug-contrib-stamp: build-gtk-debug-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_gtk_debug)/contrib/src
	touch $@


purge-dbg-py:
	@if [ ! -e build-gtk-py-stamp ]; then				\
		$(MAKE) -f debian/rules clean-py;			\
	fi
	$(RM) build-gtk-dbg-py-stamp

build-gtk-py-stamp: $(PYVERS:%=build-gtk-py%-stamp) # purge-dbg-py
	touch $@

build-gtk-py%-stamp: build-gtk-shared-stamp # purge-dbg-py
	dh_testdir
	touch docs/lgpl.txt
	cd wxPython \
		&& python$* ./setup.py build			\
						WX_CONFIG='$(wxconfig)'	\
						WXPORT=$(pytoolkit)	\
						UNICODE=1		\
						FLAVOUR=$(DEBIAN_WXFLAVOUR)
	touch $@

build-doc-stamp: build-gtk-shared-stamp
	dh_testdir
	# the tarball may already have the generated docs in it
	if [ ! -e docs/html/wx/index.html ]; then \
		$(FAST_MAKE) -C $(objdir_gtk_shared)/utils/tex2rtf/src; \
		rm -rf $(objdir_doc); \
		rm -rf $(objdir_doc_cruft); \
		mkdir $(objdir_doc); \
		mkdir $(objdir_doc_cruft); \
		cd $(objdir_doc_cruft); \
		LD_LIBRARY_PATH=../$(objdir_gtk_shared)/lib:$(LD_LIBRARY_PATH) \
		   ../$(objdir_gtk_shared)/utils/tex2rtf/src/tex2rtf           \
		   ../docs/latex/wx/manual.tex                                 \
		   ../$(objdir_doc)/wx$(release)-manual.html                   \
		   -twice -html;                                               \
		cd -; \
		cp docs/latex/wx/*.gif $(objdir_doc); \
		rm -rf $(objdir_doc_cruft); \
		rm -f $(objdir_doc)/wx$(release)-manual.{con,hh*,htx,ref}; \
	else \
		mkdir $(objdir_doc); \
		cp docs/html/wx/* $(objdir_doc); \
		mv $(objdir_doc)/index.html $(objdir_doc)/wx-$(release)-manual_contents.html; \
	fi
	touch $@

build-examples-stamp: build-gtk-shared-stamp
	dh_testdir
	mkdir -p $(objdir_examples)

	# copy all samples and the Makefile generated for libwxgtk.
	# Some files in the sources are randomly executable, so don't
	# just use cp -a here.
	cp -dR --preserve=timestamps samples $(objdir_examples)
	rm -f $(objdir_examples)/samples/Makefile
	cp -a $(objdir_gtk_shared)/samples/Makefile $(objdir_examples)/samples

	find $(objdir_examples)/samples -name 'Makefile.in' -delete
	for f in `find $(objdir_examples)/samples -name makefile.unx` ; do \
		mv $$f `dirname $$f`/Makefile ; \
	done

	cp -a wxPython/demo $(objdir_examples)/wxPython
	# Remove useless file.
	rm -f $(objdir_examples)/wxPython/b
	# Stop files being randomly executable.
	-chmod a-x \
		$(objdir_examples)/samples/Info.plist \
		$(objdir_examples)/samples/aui/descrip.mms \
		$(objdir_examples)/samples/db/descrip.mms \
		$(objdir_examples)/samples/docview/docview.r \
		$(objdir_examples)/samples/internat/ar/internat.mo \
		$(objdir_examples)/samples/internat/ar/internat.po \
		$(objdir_examples)/samples/minimal/minimal.plc \
		$(objdir_examples)/samples/xrc/descrip.mms \
		$(objdir_examples)/wxPython/bmp_source/customcontrol.png

	echo "generating unpack_examples.sh script"
	sed -e 's/=V/$(release)/g' < debian/unpack_examples.sh.in	\
				   > debian/unpack_examples.sh
	chmod 755 debian/unpack_examples.sh

	touch $@

build-i18n-stamp: build-gtk-shared-stamp
	dh_testdir

	# touch .po files first, since if they are not already up
	# to date then _now_ is not the time to fix it.
	# That should have been been done before the release was tagged.
	cd $(objdir_i18n) \
		&& touch *.po \
		&& $(MAKE) allmo
	touch $@

purge-release-py:
	@if [ ! -e build-gtk-dbg-py-stamp ]; then			\
		$(MAKE) -f debian/rules clean-py;			\
	fi
	$(RM) build-gtk-py-stamp

build-gtk-dbg-py-stamp: $(PYVERS:%=build-gtk-dbg-py%-stamp) # purge-release-py
	touch $@

build-gtk-dbg-py%-stamp: build-gtk-debug-stamp # purge-release-py
	dh_testdir
	touch docs/lgpl.txt
	cd wxPython							\
		&& python$*-dbg ./setup.py build			\
					    WX_CONFIG='$(wxconfig-dbg)' \
					    WXPORT=$(pytoolkit)		\
					    UNICODE=1			\
					    FLAVOUR=$(addsuffix -,$(DEBIAN_WXFLAVOUR))dbg
	touch $@


configure-msw-shared-stamp: config.guess
	dh_testdir
	mkdir -p $(objdir_msw_shared)
	cd $(objdir_msw_shared)						\
		&& ../configure --prefix=/usr/$(cross_host)		\
				--cache-file=$(config_cache_cross)	\
				--host=$(cross_host)			\
				--build=$(cross_build)			\
				--with-flavour=$(DEBIAN_WXFLAVOUR)	\
				$(MSW_CONFIGURE_OPTIONS)
	touch $@

build-msw-shared-stamp: configure-msw-shared-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_msw_shared)
	touch $@

configure-msw-static-stamp: config.guess
	dh_testdir
	mkdir -p $(objdir_msw_static)
	cd $(objdir_msw_static)						\
		&& ../configure --prefix=/usr/$(cross_host)		\
				--cache-file=$(config_cache_cross)	\
				--host=$(cross_host)			\
				--build=$(cross_build)			\
				--with-flavour=$(DEBIAN_WXFLAVOUR)	\
				$(MSW_CONFIGURE_OPTIONS)		\
				--disable-shared
	touch $@

build-msw-static-stamp: configure-msw-static-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_msw_static)
	touch $@

configure-msw-dbg-stamp: config.guess
	dh_testdir
	mkdir -p $(objdir_msw_dbg)
	cd $(objdir_msw_dbg)						\
		&& ../configure --prefix=/usr/$(cross_host)		\
				--cache-file=$(config_cache_cross)	\
				--host=$(cross_host)			\
				--build=$(cross_build)			\
				--with-flavour=$(DEBIAN_WXFLAVOUR)	\
				--enable-debug
	touch $@

build-msw-dbg-stamp: configure-msw-dbg-stamp
	dh_testdir
	$(FAST_MAKE) -C $(objdir_msw_dbg)
	touch $@


clean-py:
	cd wxPython && \
	    rm -rf build*/ wx/*.py build_options.py src/wx.pth wx/build/build_options.py

	# What to do about src/__version__.py ???


# We do the equivalent of this above by removing build, unfortunately
# it's not enough by itself to get the tree properly clean again.
#		&& ./setup.py clean

clean: debian/control clean-py unpatch
	dh_testdir
	dh_testroot

	rm -rf config_deb.cache config_deb_cross.cache *-stamp $(objdirs)

	dh_clean
	rm -f debian/$(package_wxbase_lib).* \
	      debian/$(package_wxbase_dev).* \
	      debian/$(package_wxbase_dbg).* \
	      debian/$(package_gtk_lib).* \
	      debian/$(package_gtk_dev).* \
	      debian/$(package_gtk_dbg).* \
	      debian/$(package_gtk_py_lib).* \
	      debian/$(package_headers).* \
	      debian/$(package_i18n).* \
	      debian/$(package_doc).* \
	      debian/$(package_examples).* \
	      debian/$(package_gtk_dbg_py).* \
	      debian/$(package_msw_dev).* \
	      debian/$(package_msw_dbg).* \
	      debian/lintian-override \
	      debian/unpack_examples.sh \
	      config.guess config.sub
	rm -rf include/wx-$(release)
	find -name '*.py[co]' -delete

install_arch: build-arch $(install_all_arch)

install: build_all $(install_all_native)

install-wxbase-lib: DH_OPTIONS=-p$(package_wxbase_lib)
install-wxbase-lib: build-wxbase-shared-stamp install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	@# No, this is not a typo, we steal these libs from the gtk build.
	dh_install $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_base*.so.*	usr/lib/$(DEB_HOST_MULTIARCH)
	dh_installdirs usr/share/lintian/overrides
	grep ^$(package_wxbase_lib): debian/lintian-override > debian/$(package_wxbase_lib)/usr/share/lintian/overrides/$(package_wxbase_lib)

install-wxbase-dev: DH_OPTIONS=-p$(package_wxbase_dev)
install-wxbase-dev: build-wxbase-shared-stamp install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	@# No, this is not a typo, we steal these libs from the gtk build.
	dh_install $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_base*.so	usr/lib/$(DEB_HOST_MULTIARCH)
	dh_install $(objdir_wxbase_shared)/lib/wx/include	usr/lib/$(DEB_HOST_MULTIARCH)/wx
	dh_install $(objdir_wxbase_shared)/lib/wx/config/base*	usr/lib/$(DEB_HOST_MULTIARCH)/wx/config

install-wxbase-dbg: DH_OPTIONS=-p$(package_wxbase_dbg)
install-wxbase-dbg: build-wxbase-debug-stamp
	dh_testdir
	dh_testroot
	dh_prep
	@# No, this is not a typo, we steal these libs from the gtk debug build.
	dh_install $(objdir_gtk_debug)/lib/libwx_base*		usr/lib/$(DEB_HOST_MULTIARCH)
	dh_install $(objdir_wxbase_debug)/lib/wx/include	usr/lib/$(DEB_HOST_MULTIARCH)/wx
	dh_install $(objdir_wxbase_debug)/lib/wx/config/base*	usr/lib/$(DEB_HOST_MULTIARCH)/wx/config
	dh_installdirs usr/share/lintian/overrides
	grep ^$(package_wxbase_dbg): debian/lintian-override > debian/$(package_wxbase_dbg)/usr/share/lintian/overrides/$(package_wxbase_dbg)

install-gtk-shared-stamp: build-gtk-shared-stamp build-gtk-shared-contrib-stamp
	dh_testdir
	mkdir -p $(objdir_gtk_install)
	cd $(objdir_gtk_shared) \
		&& $(MAKE) install prefix=`pwd`/../$(objdir_gtk_install)
	cd $(objdir_gtk_shared)/contrib/src \
		&& $(MAKE) install prefix=`pwd`/../../../$(objdir_gtk_install)
	touch $@

install-gtk-lib: DH_OPTIONS=-p$(package_gtk_lib)
install-gtk-lib: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*.so.*	usr/lib/$(DEB_HOST_MULTIARCH)
	dh_installdirs usr/share/lintian/overrides
	grep ^$(package_gtk_lib): debian/lintian-override > debian/$(package_gtk_lib)/usr/share/lintian/overrides/$(package_gtk_lib)

install-gtk-dev: DH_OPTIONS=-p$(package_gtk_dev)
install-gtk-dev: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/libwx_gtk*.so	usr/lib/$(DEB_HOST_MULTIARCH)
	dh_install $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/wx/include	usr/lib/$(DEB_HOST_MULTIARCH)/wx
	dh_install $(objdir_gtk_install)/lib/$(DEB_HOST_MULTIARCH)/wx/config/gtk*	usr/lib/$(DEB_HOST_MULTIARCH)/wx/config

install-gtk-dbg: DH_OPTIONS=-p$(package_gtk_dbg)
install-gtk-dbg: build-gtk-debug-stamp build-gtk-debug-contrib-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_gtk_debug)/lib/libwx_gtk*		usr/lib/$(DEB_HOST_MULTIARCH)
	dh_install $(objdir_gtk_debug)/lib/wx/include		usr/lib/$(DEB_HOST_MULTIARCH)/wx
	dh_install $(objdir_gtk_debug)/lib/wx/config/gtk*	usr/lib/$(DEB_HOST_MULTIARCH)/wx/config
	dh_installdirs usr/share/lintian/overrides
	grep ^$(package_gtk_dbg): debian/lintian-override > debian/$(package_gtk_dbg)/usr/share/lintian/overrides/$(package_gtk_dbg)


install-gtk-py-lib: DH_OPTIONS=-p$(package_gtk_py_lib)
install-gtk-py-lib: install-gtk-py-lib-pre $(PYVERS:%=install-gtk-pylib%)
	/bin/echo -n "$(wxsubdir)" > debian/$(package_gtk_py_lib)/usr/lib/wx/python/wx$(release).pth
install-gtk-py-lib-pre:
	dh_testdir
	dh_testroot
	dh_prep
install-gtk-pylib%: install-gtk-py-lib-pre build-gtk-py%-stamp
	dh_testdir
	dh_testroot
	dh_installdirs usr/lib/wx/python
	cd wxPython								\
		&& python$* ./setup.py install				\
			      --install-layout=deb \
			      --prefix=`pwd`/../debian/$(package_gtk_py_lib)/usr \
			      WX_CONFIG='$(wxconfig)'				\
			      SYS_WX_CONFIG='$(py_wxconfig)'			\
			      WXPORT=$(pytoolkit)				\
			      UNICODE=1						\
			      FLAVOUR=$(DEBIAN_WXFLAVOUR)

	cp -a include/wx-$(release) \
	    debian/$(package_headers)/usr/include

	rm -f debian/$(package_gtk_py_lib)/usr/lib/python$*/$(call py_sitename,$*)/wx.pth

	find debian/$(package_gtk_py_lib)/usr/lib/python$* -name '*.py?' -delete

	# Fix image-file-in-usr-lib lintian warnings.
	mkdir -p debian/$(package_gtk_py_lib)/usr/share/$(package_gtk_py_lib)/XRCed/plugins/
	cp -rf debian/$(package_gtk_py_lib)/usr/lib/python$*/$(call py_sitename,$*)/$(wxsubdir)/wx/tools/XRCed/plugins/bitmaps debian/$(package_gtk_py_lib)/usr/share/$(package_gtk_py_lib)/XRCed/plugins/
	-rm -rf debian/$(package_gtk_py_lib)/usr/lib/python$*/$(call py_sitename,$*)/$(wxsubdir)/wx/tools/XRCed/plugins/bitmaps

	# This is rather bogus, it's included in the main copyright file now though.
	rm -f debian/$(package_gtk_py_lib)/usr/lib/python$*/$(call py_sitename,$*)/$(wxsubdir)/wx/tools/XRCed/license.txt
	# has its own package, editra
	rm -fr debian/$(package_gtk_py_lib)/usr/lib/python$*/$(call py_sitename,$*)/$(wxsubdir)/wx/tools/Editra

install-gtk-py-ver: DH_OPTIONS=-p$(package_gtk_py_ver)
install-gtk-py-ver: install-gtk-py-lib
	dh_testdir
	dh_testroot
	dh_prep

ifndef DEBIAN_WX_DEFAULT_VERSION

	dh_movefiles --sourcedir=debian/$(package_gtk_py_lib) \
		$(foreach pv,$(PYVERS),$(call py_libdir,$(pv))/wxversion.py)
	for v in $(foreach pv,$(PYVERS),debian/$(package_gtk_py_ver)$(call py_libdir,$(pv))/wx.pth); do \
	  ln -sf ../../wx/python/wx.pth $$v; \
	done
else
	rm -f debian/$(package_gtk_py_lib)/usr/lib/python*/*/wxversion.py
endif



install-gtk-py-tools: DH_OPTIONS=-p$(package_gtk_py_tools)
install-gtk-py-tools: install-gtk-py-ver
	dh_testdir
	dh_testroot
	dh_prep

install-gtk-py: DH_OPTIONS=-p$(package_gtk_py_tools)
install-gtk-py: install-gtk-py-tools

ifndef DEBIAN_WX_DEFAULT_VERSION

	dh_movefiles --sourcedir=debian/$(package_gtk_py_lib) usr/bin

	dh_installman debian/wxPython-tools.1
	dh_link usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/img2py.1     \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/img2xpm.1    \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/img2png.1    \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/pycrust.1    \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/xrced.1      \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/helpviewer.1 \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/pyalacarte.1 \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/pyalamode.1  \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/pywrap.1     \
		usr/share/man/man1/wxPython-tools.1 usr/share/man/man1/pywxrc.1

	rm debian/$(package_gtk_py_tools)/usr/bin/editra
	rm debian/$(package_gtk_py_tools)/usr/bin/pyshell
endif
	mkdir -p debian/$(package_gtk_py_tools)/usr/share/pixmaps
	mkdir -p debian/$(package_gtk_py_tools)/usr/share/applications

	cp debian/pycrust.xpm                   debian/$(package_gtk_py_tools)/usr/share/pixmaps/pycrust.xpm
	cp debian/xrced.xpm                     debian/$(package_gtk_py_tools)/usr/share/pixmaps/xrced.xpm
	cp wxPython/wx/py/PyCrust_32.png        debian/$(package_gtk_py_tools)/usr/share/pixmaps/pycrust.png
	cp wxPython/wx/tools/XRCed/XRCed_32.png debian/$(package_gtk_py_tools)/usr/share/pixmaps/xrced.png
	cp debian/pycrust.desktop               debian/$(package_gtk_py_tools)/usr/share/applications
	cp debian/xrced.desktop                 debian/$(package_gtk_py_tools)/usr/share/applications

	rm -r debian/$(package_gtk_py_lib)/usr/bin


install-common: DH_OPTIONS=-p$(package_common)
install-common: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep

	dh_install $(objdir_gtk_install)/share/bakefile/presets usr/share/bakefile
	dh_install $(objdir_gtk_install)/share/bakefile/presets/wx*.bkl usr/share/bakefile/presets

	dh_install $(objdir_gtk_install)/share/aclocal usr/share
	dh_installman debian/wx-config.1

	dh_install $(objdir_gtk_shared)/utils/wxrc/wxrc usr/bin
	dh_installman debian/wxrc-tools.1
	dh_link usr/share/man/man1/wxrc-tools.1 usr/share/man/man1/wxrc.1


install-headers: DH_OPTIONS=-p$(package_headers)
install-headers: install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep

# The only way to be really sure we get the univ headers correct is to install
# them.  Do that in a scratch dirs, and move the gtk ones last, so at least
# they win in the result of any uncaught conflict.

#	cd $(objdir_gtk_univ) \
#		&& $(MAKE) install prefix=`pwd`/../$(objdir_univ_install)/usr

#	dh_movefiles --sourcedir=$(objdir_univ_install)
	dh_install $(objdir_gtk_install)/include	usr

install-i18n: DH_OPTIONS=-p$(package_i18n)
install-i18n: build-i18n-stamp install-gtk-shared-stamp
	dh_testdir
	dh_testroot
	dh_prep
	# We end up with usr/share/locale/zh/LC_MESSAGES/ empty in 2.8.12.1.
	find $(objdir_gtk_install)/share/locale -type d -empty -delete
	dh_install $(objdir_gtk_install)/share/locale	usr/share

install-doc: DH_OPTIONS=-p$(package_doc)
install-doc: build-doc-stamp
	dh_testdir
	dh_testroot
	dh_prep

	@# Link this monstrosity with an overly obfuscated name
	@# to something that both people and browsers can expect to find.
	dh_link usr/share/doc/$(package_doc)/wx-manual.html/wx-$(release)-manual_contents.html \
		usr/share/doc/$(package_doc)/wx-manual.html/index.html

install-examples: DH_OPTIONS=-p$(package_examples)
install-examples: build-examples-stamp
	dh_testdir
	dh_testroot
	dh_prep

install-gtk-dbg-py: DH_OPTIONS=-p$(package_gtk_dbg_py)
install-gtk-dbg-py: install-gtk-dbg-py-pre $(PYVERS:%=install-gtk-dbg-py%)
install-gtk-dbg-py-pre:
	dh_testdir
	dh_testroot
	dh_prep
install-gtk-dbg-py%: install-gtk-dbg-py-pre build-gtk-dbg-py%-stamp
	dh_testdir
	dh_testroot
	dh_installdirs usr/lib/wx/python
	cd wxPython								\
		&& python$*-dbg ./setup.py install				\
			      --install-layout=deb \
			      --prefix=`pwd`/../debian/$(package_gtk_dbg_py)/usr \
			      WX_CONFIG='$(wxconfig-dbg)'			\
			      SYS_WX_CONFIG='$(pyd_wxconfig)'			\
			      WXPORT=$(pytoolkit)				\
			      UNICODE=1						\
			      FLAVOUR=$(addsuffix -,$(DEBIAN_WXFLAVOUR))dbg

	mv debian/$(package_gtk_dbg_py)/usr/lib/python$*/$(call py_sitename,$*)/$(wxsubdir)-dbg \
		debian/$(package_gtk_dbg_py)/usr/lib/python$*/$(call py_sitename,$*)/$(wxsubdir)

	-find debian/$(package_gtk_dbg_py) -name '*_d.so'
	find debian/$(package_gtk_dbg_py) ! -type d ! -name '*.so' -delete
	find debian/$(package_gtk_dbg_py) -depth -type d -empty -delete


install-msw-dev: DH_OPTIONS=-p$(package_msw_dev)
install-msw-dev: build-msw-shared-stamp build-msw-static-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_msw_shared)/lib/*.dll*		     usr/$(cross_host)/lib
	dh_install $(objdir_msw_shared)/lib/wx/include		     usr/$(cross_host)/lib/wx
	dh_install $(objdir_msw_shared)/lib/wx/config/$(cross_host)* usr/$(cross_host)/lib/wx/config
	dh_install $(objdir_msw_static)/lib/*.a			     usr/$(cross_host)/lib
	dh_install $(objdir_msw_static)/lib/wx/include		     usr/$(cross_host)/lib/wx
	dh_install $(objdir_msw_static)/lib/wx/config/$(cross_host)* usr/$(cross_host)/lib/wx/config
	$(cross_host)-strip --strip-debug debian/$(package_msw_dev)/usr/$(cross_host)/lib/*.a

	@# As a special case for the cross packages, we link their config
	@# under /usr as well as under the normal cross prefix.  This way
	@# --prefix=/usr/$(cross_host) and --prefix=/usr --host=$(cross_host)
	@# will have a congruent effect on wx-config.
	@( for f in `ls -1 debian/$(package_msw_dev)/usr/$(cross_host)/lib/wx/config`; do \
	      all_cfg="$${all_cfg} usr/$(cross_host)/lib/wx/config/$$f usr/lib/wx/config/$$f"; \
	      echo "linking cross config /usr/$(cross_host)/lib/wx/config/$$f"; \
	   done;                                                                \
	   dh_link $${all_cfg};                                                 \
	 )

install-msw-dbg: DH_OPTIONS=-p$(package_msw_dbg)
install-msw-dbg: build-msw-dbg-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_install $(objdir_msw_dbg)/lib/*.dll*			  usr/$(cross_host)/lib
	dh_install $(objdir_msw_dbg)/lib/wx/include		  usr/$(cross_host)/lib/wx
	dh_install $(objdir_msw_dbg)/lib/wx/config/$(cross_host)* usr/$(cross_host)/lib/wx/config
	# No static lib, they're freakin' huge!
	#$(cross_host)-strip --strip-debug debian/$(package_msw_dbg)/usr/$(cross_host)/lib/*.a

	@( for f in `ls -1 debian/$(package_msw_dbg)/usr/$(cross_host)/lib/wx/config`; do \
	      all_cfg="$${all_cfg} usr/$(cross_host)/lib/wx/config/$$f usr/lib/wx/config/$$f"; \
	      echo "linking cross config /usr/$(cross_host)/lib/wx/config/$$f"; \
	   done;                                                                \
	   dh_link $${all_cfg};                                                 \
	 )

install-headers-msw: DH_OPTIONS=-p$(package_headers_msw)
install-headers-msw:
	dh_testdir
	dh_testroot
	dh_prep

	cd $(objdir_msw_shared) \
		&& $(MAKE) install prefix=`pwd`/../$(objdir_msw_install)

#	Symlink all the headers that will be installed by the main -headers
#	package to where the cross compiler will expect them.
	@( for f in `ls -1 $(objdir_msw_install)/include/wx-$(release)/wx`; do  \
	      all_h="$${all_h} usr/include/wx-$(release)/wx/$$f usr/$(cross_host)/include/wx-$(release)/wx/$$f"; \
	      echo "linking header /usr/include/wx-$(release)/wx/$$f"; \
	   done;                                                       \
	   dh_link $${all_h};                                          \
	 )

#	But install this lot for real.
	rm -f debian/$(package_headers_msw)/usr/$(cross_host)/include/wx-$(release)/wx/msw
	dh_install $(objdir_msw_install)/include/wx-$(release)/wx/msw  usr/$(cross_host)/include/wx-$(release)/wx

binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs docs/changes.txt
	dh_installdocs
	dh_installexamples
	dh_installmenu
	dh_link
	dh_python2

	@# Don't strip debug libs at all, and strip cross libs elsewhere
	@# with the cross host tools until dh_strip gets smarter.
ifneq (, $(filter -a, $(DH_OPTIONS)))
	dh_strip -N$(package_gtk_dbg) -N$(package_wxbase_dbg) \
		 -N$(package_msw_dev) -N$(package_msw_dbg) \
		 -N$(package_gtk_py_lib) -N$(package_gtk_dbg_py)
	DH_OPTIONS= dh_strip -p$(package_gtk_py_lib) --dbg-package=$(package_gtk_dbg_py)
endif
	dh_compress -X.py
	dh_fixperms

	@# Don't do this for the dbg-py special build because dh_makeshlibs
	@# will crap out if it is called with no packages to act on.
ifneq ($(DH_OPTIONS),-p$(package_gtk_dbg_py))
	dh_makeshlibs -N$(package_gtk_py_lib) -V
endif

	dh_installdeb
	dh_shlibdeps -ldebian/$(package_wxbase_lib)/usr/lib:debian/$(package_wxbase_dbg)/usr/lib:debian/$(package_gtk_lib)/usr/lib:debian/$(package_gtk_dbg)/usr/lib
	dh_gencontrol
	dh_md5sums
	dh_builddeb

# Build architecture-independent files here.
# Note that you currently can't build the indep packages without first
# building the arch specific package files needed to create them.
binary-indep: build_all install
	$(MAKE) -f debian/rules \
		DH_OPTIONS="-i $(addprefix -N,$(extra_packages))" \
		binary-common

# Build just the architecture-dependent files here.
binary-arch: build-arch install_arch
	$(MAKE) -f debian/rules \
		DH_OPTIONS="-a $(addprefix -N,$(extra_packages))" \
		binary-common
	rm -rf debian/$(package_gtk_dbg_py)/usr/share/doc/$(package_gtk_dbg_py)
	ln -s $(package_gtk_py_lib) debian/$(package_gtk_dbg_py)/usr/share/doc/$(package_gtk_dbg_py)

# Build all packages target.
binary: binary-arch binary-indep


# This is a special target for building the wxMSW-cross packages.
# It's not currently called during the official package build run
# but may be run separately to build the extra packages.
# There is an implied build dep on the mingw32 cross compiler
# that is not in the control file.
binary-cross: control-files-stamp $(install_all_cross)
	$(MAKE) -f debian/rules \
		DH_OPTIONS="-p$(package_msw_dev) -p$(package_msw_dbg) -p$(package_headers_msw)" \
		binary-common


# Build wxPython against libwxgtk-dbg.  This package will conflict
# with the release build one, but may be useful to some people.
binary-dbg-py: control-files-stamp install-gtk-dbg-py
	$(MAKE) -f debian/rules DH_OPTIONS="-p$(package_gtk_dbg_py)" binary-common


############################################################################
#
# Some rules to build a subset of the complete list of packages that can be
# built.  Beware that packages produced with these rules may *NOT*
# be compatible with packages built using the 'binary' target or even with
# Debian policy.  Do not distribute packages built with these rules, they
# are currently useful for rapid in-house testing by developers only.

DH_OPTIONS_GTK := -p$(package_wxbase_lib) -p$(package_gtk_lib) -p$(package_headers)

# libwxgtk shared lib package
binary-gtk: control-files-stamp install-gtk-lib install-wxbase-lib install-headers
	$(MAKE) -f debian/rules DH_OPTIONS="$(DH_OPTIONS_GTK)" binary-common

binary-gtk-dev: control-files-stamp install-gtk-dev install-wxbase-dev install-headers
	$(MAKE) -f debian/rules \
	    DH_OPTIONS="-p$(package_wxbase_dev) -p$(package_gtk_dev) $(DH_OPTIONS_GTK)" \
	    binary-common

binary-gtk-dbg: control-files-stamp install-gtk-dbg install-wxbase-dbg install-headers
	$(MAKE) -f debian/rules \
	    DH_OPTIONS="-p$(package_wxbase_dbg) -p$(package_gtk_dbg) -p$(package_headers)" \
	    binary-common

# docs package
binary-doc: control-files-stamp install-doc
	$(MAKE) -f debian/rules DH_OPTIONS=-p$(package_doc) binary-common

binary-fast:control-files-stamp install-gtk-dbg install-msw-dev install-headers install-headers-msw
	$(MAKE) -f debian/rules DH_OPTIONS="-p$(package_gtk_dbg) -p$(package_msw_dev) -p$(package_headers) -p$(package_headers_msw)" binary-common

.PHONY: build build_all build-arch build-indep				\
	clean clean-py purge-release-py purge-dbg-py			\
	binary-indep binary-arch binary binary-common			\
	binary-gtk binary-gtk-dev binary-gtk-dbg			\
	binary-wxbase binary-wxbase-dev binary-wxbase-dbg		\
	binary-doc binary-cross binary-dbg-py				\
	install install_arch install-gtk-lib install-gtk-dev		\
	install-gtk-dbg							\
	install-gtk-py install-gtk-py-tools install-gtk-py-ver		\
	install-gtk-py-lib install-gtk-dbg-py				\
	install-common install-headers install-i18n install-doc         \
	install-examples install-msw-dev install-msw-dbg install-headers-msw
